# -*- coding: utf-8 -*-
"""Proyecto Final (Modelo Predictivo).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HjIyUInjMNMoRyhL67IqLaztpCnf6n5V

**MODELO PREDICTIVO** (ML/DL)

(INDICADORES DE SEGURIDAD OPERACIONAL - MANTENIMIENTO E INSPECCIÓN DE AERONAVES Y COMPONENTES)

1. **Preparación del Dataset**

1.1 Librerías
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
import tensorflow as tf
from tensorflow import keras
import statsmodels.api as sm
import scipy
import h5py
import chardet
from tabulate import tabulate
from google.colab import drive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

pip install tabulate

"""1.2 Carga de **Dataset**"""

from google.colab import drive
drive.mount('/content/drive')

# Ruta al archivo CSV en Google Drive
file_path = '/content/drive/MyDrive/Bootcamp AI&ML KC/Proyecto Final/Dataset(DatosPeligrosSegOp).csv'

# Carga el archivo CSV en un DataFrame usando el punto y coma como separador y 'latin1' como encoding
data = pd.read_csv(file_path, sep=';', encoding='ISO-8859-1')
data

#Nombres de las columnas
column_names = data.columns
print(column_names)

#Tipo de dato de todas las columnas
data_types = data.dtypes
print(data_types)

"""1.3 Procesamiento inicial"""

#Eliminar saltos --> \n
data.columns = data.columns.str.replace('\n', ' ')

#Ajustar el texto --> eliminar espacios en blanco al principio y al final de c/cadena
for columna in data.columns:

    if data[columna].dtype == 'O':  # 'O' representa tipo object (cadena)
        data[columna] = data[columna].str.strip()

#Convertir datos float64 en int64
data = data.astype('int64', errors='ignore')

#Imprimir nombres de columnas con # índice
for i, columna in enumerate(data.columns):
    print(f'Columna {i}: {columna}')

#Eliminar Columnas no requeridas --> Unnamed
data = data.drop(data.columns[[31]], axis=1)

print(data.columns)

#Suma de peligros por mes
#Número total de datos en el dataset
total_peligros_por_mes = data[['Peligros Ene', 'Peligros Feb', 'Peligros Mar', 'Peligros Abr', 'Peligros May', 'Peligros Jun', 'Peligros Jul', 'Peligros Ago', 'Peligros Sep', 'Peligros Oct', 'Peligros Nov', 'Peligros Dic']].sum(axis=1)
num_datos = total_peligros_por_mes.sum()
print(f'Número total --> Datos en dataset: {num_datos}')

"""1.4 EDA (Exploración de Datos)

1.4.1 Variables del dataset

*   **Año** --> Año en el que se registraron los datos.

* **Peligros (Fallas/Errores)** --> Descripción de la naturaleza del peligro, falla o error, que afecta la Seguridad de Aeronave o Componente de Aeronave.
*   **Consecuencias Potenciales** --> Afectación o impacto a la seguridad
*   **Nivel del Riesgo** --> (Escala de 1 a 5 )(5=MayorNivel de Severidad)
*   **Categoría del Peligro** --> Agrupa y clasifica los peligros registrados en el conjunto de datos en categorías específicas.
*   **Código del Peligro** --> Identifica de manera única cada peligro.
*   **Peligros Ene a Dic** --> Cantidad de peligros en cada mes.
*   **HHT Ene a Dic** --> Horas-Hombre Trabajadas (HHT) relacionadas con esos peligros para cada mes del año.

1.4.2 Tipo de Variables

* **Variable a Predecir** - Salida del Modelo --> Indicador del Rendimiento de la Seguridad Operacional
* **Covariables** - Entrada del Modelo --> a. Total de Peligros x M - b. Total de HHT x M - c.Escala de referencia HHT = 1000

1.4.3 Datos Faltantes (missing values)
"""

#Datos faltantes en cada columna
datos_faltantes = data.isnull()
datos_faltantes_count = datos_faltantes.sum()
datos_faltantes_count

"""Datos faltantes evidenciados --> Datos de Oct/Nov/Dic de 2023

1.4.4 Comportamiento de los datos
"""

#Crear lista --> columnas_peligros
#Crear nueva columna --> Total_Peligros
#df=resumen -->  Resume los datos de peligros x año
columnas_peligros = [f'Peligros {mes}' for mes in ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']]
data['Total_Peligros'] = data[columnas_peligros].sum(axis=1)
resumen = data[['Año'] + columnas_peligros + ['Total_Peligros']].groupby('Año').sum()
resumen_transpuesta = resumen.T
with pd.option_context('display.max_columns', None):
    print(resumen_transpuesta)

#Identificar columnas de peligros
#Crear nueva columna --> conteo total de peligros por mes
#Encontrar año con más peligros
#Encontrar mes con más peligros en el año con más peligros
columnas_peligros = [f'Peligros {mes}' for mes in ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']]
data['Total_Peligros'] = data[columnas_peligros].sum(axis=1)
anio_max_peligros = data.groupby('Año')['Total_Peligros'].sum().idxmax()
cant_peligros_anio = data.groupby('Año')['Total_Peligros'].sum().max()

mes_max_peligros = data[data['Año'] == anio_max_peligros][columnas_peligros].sum().idxmax()
cant_peligros_mes = data[data['Año'] == anio_max_peligros][columnas_peligros].sum().max()

print(f"Año con más peligros registrados: {anio_max_peligros}, Cantidad: {cant_peligros_anio} peligros")
print(f"Mes con más peligros en año con más peligros: {mes_max_peligros}, Cantidad: {cant_peligros_mes} peligros")

#Filtrar datos --> años 2018 a 2022
#Crear nueva columna --> conteo total de peligros por mes
#Encontrar año con menos peligros
#Encontrar mes con menos peligros en el año con menos peligros
data_filtered = data[(data['Año'] >= 2018) & (data['Año'] <= 2022)]
anio_min_peligros = data_filtered.groupby('Año')['Total_Peligros'].sum().idxmin()
cant_peligros_min_anio = data_filtered.groupby('Año')['Total_Peligros'].sum().min()
mes_min_peligros = data_filtered[data_filtered['Año'] == anio_min_peligros][columnas_peligros].sum().idxmin()
cant_peligros_min_mes = data_filtered[data_filtered['Año'] == anio_min_peligros][columnas_peligros].sum().min()

print(f"Año con menos peligros: {anio_min_peligros}, Cantidad: {cant_peligros_min_anio} peligros")
print(f"Mes con menos peligros en año con menos peligros: {mes_min_peligros}, Cantidad: {cant_peligros_min_mes} peligros")

#Exraer códigos de peligro únicos de la columna 'Código del Peligro'
#Inicializar Variables para rastrear los códigos de peligro más repetidos y su cantidad
#Iterar a través de los códigos de peligro únicos
#Calcular sumatoria total de peligros
#Filtra para excluir el año 2023
#Ordenar la lista por cantidad en orden descendente --> Top 5 Peligros con mayor frecuencia
codigos_de_peligro = data[data['Año'] < 2023]['Código del Peligro'].unique()
top_5_codigos = []

for codigo in codigos_de_peligro:
    data_filtrada = data[(data['Año'] < 2023) & (data['Código del Peligro'] == codigo)]
    total_peligros = data_filtrada[columnas_peligros].sum().sum()

    if len(top_5_codigos) < 5:
        top_5_codigos.append((codigo, total_peligros))
    else:
        top_5_codigos.sort(key=lambda x: x[1])
        if total_peligros > top_5_codigos[0][1]:
            top_5_codigos[0] = (codigo, total_peligros)

top_5_codigos.sort(key=lambda x: x[1], reverse=True)

for i, (codigo, cantidad) in enumerate(top_5_codigos, 1):
    print(f"{i}. Código de Peligro: {codigo}, Total: {cantidad}")

"""-Peligro P3.2 --> Utilización de información técnica no aplicables a la marca y modelo del equipo, instrumento o accesorio.

-Peligro P4.15 --> Daños causados por elementos extraños a las aeronaves FOD

-Peligro P8.8 --> Daños a la estructura de la aeronave, como grietas, corrosión o daños estructurales

-Peligro P8.1 --> Abastecimiento de combustible incumpliendo procedimientos estandarizados normativos
"""

#Filtrar filas --> Nivel de Riesgo = 5
#Obtener códigos de peligro únicos nivel de riesgo 5
#Mostrar códigos de peligro nivel de riesgo 5
peligros_nivel_5 = data[data['Nivel de Riesgo (1 - 5)'] == 5]
codigos_peligro_nivel_5 = peligros_nivel_5['Código del Peligro'].unique()
print(codigos_peligro_nivel_5)

"""-Peligros con mayor número de frecuencia y Nivel del Riesgo=5 --> P4.15 y P8.8"""

#Filtrar datos del código de peligro P4.15
#Seleccionar columnas de los peligros de enero a diciembre
#Crear gráfica de líneas --> Resaltar los valores numéricos por año (2018 a 2022)
data_p4_15 = data[data['Código del Peligro'] == 'P4.15']
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

for anio in range(2018, 2023):
    data_anio = data_p4_15[data_p4_15['Año'] == anio]
    valores_por_mes = [data_anio[f'Peligros {mes}'].values[0] for mes in meses]
    plt.figure(figsize=(14, 2))
    plt.plot(meses, valores_por_mes, marker='o', linestyle='-', label=f'Comportamiento P4.15 en {anio}')
    plt.title(f'Comportamiento de P4.15 en {anio}')
    plt.xlabel('Mes')
    plt.ylabel('Número de Peligros')
    plt.grid(True)
    plt.legend(loc='upper right')
    plt.show()

#Filtrar los datos (2013 a 2022)
#Seleccionar columnas de interés
#Calcular suma total de peligros x mes para todos los años
#Graficar
datos_2013_2022 = data[(data['Año'] >= 2013) & (data['Año'] <= 2022)]
columnas_peligros = [f'Peligros {mes}' for mes in ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']]
suma_por_mes = datos_2013_2022[columnas_peligros].sum()

plt.figure(figsize=(14, 3))
plt.plot(suma_por_mes.index, suma_por_mes.values, marker='o', linestyle='-', color='b')
plt.title('Tendencia de Peligros por Mes (2013-2022)')
plt.xlabel('Mes')
plt.ylabel('Número de Peligros')
plt.xticks(rotation=45)
plt.grid(True)

for x, y in zip(suma_por_mes.index, suma_por_mes.values):
    plt.text(x, y, f'({y})', ha='center', va='bottom', fontsize=10)
plt.show()

"""-Meses con mayor # de peligros identificados (Periodo 2013-2022) --> Mayo, Julio, Dic"""

#Periodo del conteo --> 2013-2023
#Obtener lista de categorías únicas presentes en el DataFrame.
#Inicializar un diccionario para almacenar sumas de peligros por categoría.
#Iterar a través de las categorías y realizar suma para cada una.
categorias = data['Categoría del Peligro'].unique()
suma_peligros_por_categoria = {}

for categoria in categorias:
    categoria_data = data[data['Categoría del Peligro'] == categoria]
    columnas_peligros = ['Peligros Ene', 'Peligros Feb', 'Peligros Mar', 'Peligros Abr', 'Peligros May']
    suma_peligros = categoria_data[columnas_peligros].sum().sum()
    suma_peligros_por_categoria[categoria] = suma_peligros

for categoria, suma in suma_peligros_por_categoria.items():
    print(f"Peligros Categoría: {categoria}: {suma}")

#Graficar Diagrama de Pareto
#Establecer --> Listado desde Categoría del Peligro
#Definir --> Frecuencias
#Definir --> % acumulado
categorias = [
    "Procedimientos de Mantenimiento,\nReparación e Inspección",
    "Prueba de Vuelo y Operacional",
    "Control Calidad e Inspección",
    "Entrenamiento / Factor-Humano /\nCompetencia del personal técnico",
    "Manuales y Procedimientos Técnicos",
    "Aprobación de Retorno al Servicio /\nConformidad de Mantenimiento",
    "Equipos, Componentes y Materiales",
    "Equipos y Herramientas Calibradas"
]
frecuencias = [3216, 2308, 1478, 1098, 949, 804, 664, 541]
porcentaje_acumulado = [34.98, 57.56, 73.41, 85.93, 92.82, 98.21, 99.99, 100.00]
fig, ax1 = plt.subplots(figsize=(12, 4))
ax1.bar(categorias, frecuencias, color='b')
ax1.set_ylabel('Frecuencia', color='b')
ax1.tick_params(axis='y', labelcolor='b')
plt.xticks(rotation=45, ha='right', fontsize=8)
ax2 = ax1.twinx()
ax2.plot(categorias, porcentaje_acumulado, marker='o', color='r', linestyle='--')
ax2.set_ylabel('Porcentaje Acumulado (%)', color='r')
plt.title('Diagrama de Pareto')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""-Diagrama de Pareto --> El 80% de los efectos están causados por las tres primeras categorías, las cuales representan el 21% del total de categorías. Esto indica que (el 21%) es responsable de la mayoría de los peligros en el dataset.

*   Procedimientos de Mantenimiento, Reparación e Inspección
*   Prueba de Vuelo y Operacional
*   Control Calidad e Inspección

1.5 Elaboración **Tabla de Datos** --> Cálculo de **Tasa de Peligros** Mensual (Ene-Dic) por Año (2013-2022)

1.5.1 Elaboración de **Hojas de Datos** --> Generar **Diagrama de Indicador de Rendimiento de Seguridad Operacional**
"""

#Eliminar Columnas no requeridas
data = data.drop(data.columns[[1, 2, 3, 5]], axis=1)
data.head()

#Obtener nombres de las columnas
#Eliminar palabra "Peligros" de los nombres de las columnas
nombres_columnas = data.columns
for numero, nombre in enumerate(nombres_columnas):
    nuevo_nombre = nombre.replace("Peligros ", "")
    data.rename(columns={nombre: nuevo_nombre}, inplace=True)
print(data.columns)

"""A. Crear Tablas 1 y 2

A.1 **Tabla 1** --> Contiene: Registro Peligros

A.2 **Tabla 2** --> Contiene: Registro HHT
"""

#Dividir el DataFrame en dos tablas --> Tabla 1=Registro Peligros, Tabla 2=Registro HHT
#Renombrar tablas
#Mostrar primeras filas de las dos tablas
tabla1 = data[['Año', 'Categoría del Peligro', 'Código del Peligro', 'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']]
tabla2 = data[['Año', 'HHT Ene', 'HHT Feb', 'HHT Mar', 'HHT Abr', 'HHT May', 'HHT Jun', 'HHT Jul', 'HHT Ago', 'HHT Sep', 'HHT Oct', 'HHT Nov', 'HHT Dic']]

tabla1 = tabla1.rename(columns={'Código del Peligro': 'Código de Peligro'})
tabla1.name = 'Registro Peligros'
tabla2.name = 'Registro HHT'

print(tabla1.name)
tabla1

print(tabla2.name)
tabla2

"""B. Elaborar **Hoja de Datos** --> **Indicadores de Rendimiento de Seguridad Operacional**

B.1 Datos de referencia --> Categorías de Peligros (2013-2022) que representan el **80%** de la afectación de la Seguridad:

*   **Procedimientos de Mantenimiento, Reparación e Inspección**
*   **Prueba de Vuelo y Operacional**
*   **Control Calidad e Inspección**

B.1.1 Desarrollo de Indicador de Rendimiento de S.O. --> (**Procedimientos de Mantenimiento, Reparación e Inspección**)
"""

#Filtrar datos para el año 2013 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular promedio de la "Tasa de Peligros"
#Calcular SD de la "Tasa de Peligros"
#Crear DataFrame
#Crear tabla5 --> Datos de 2013
data_2013_pmri = data[(data['Año'] == 2013) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses_2013 = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2013 = []
peligros_total_2013 = []
for mes in meses_2013:
    hht_total_mes_2013 = data_2013_pmri[f'HHT {mes}'].mean()
    peligros_total_mes_2013 = data_2013_pmri[mes].sum()
    hht_total_2013.append(round(hht_total_mes_2013, 2))
    peligros_total_2013.append(round(peligros_total_mes_2013, 2))

tasa_peligros_2013 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2013, hht_total_2013)]
tasa_peligros_2013 = [f'{valor:.2f}' for valor in tasa_peligros_2013]

promedio_tasa_peligros_2013 = round(sum(map(float, tasa_peligros_2013)) / len(tasa_peligros_2013), 2)
promedio_tasa_peligros_2013 = f'{promedio_tasa_peligros_2013:.2f}'

sd_tasa_peligros_2013 = pd.Series(map(float, tasa_peligros_2013)).std()
sd_tasa_peligros_2013 = f'{sd_tasa_peligros_2013:.2f}'

datos_2013 = {
    'Mes': meses_2013,
    'HHT Total': hht_total_2013,
    'Peligros Total': peligros_total_2013,
    'Tasa de Peligros': tasa_peligros_2013,
    'Promedio': [promedio_tasa_peligros_2013] * 12,
    'SD': [sd_tasa_peligros_2013] * 12
}

tabla5_2013 = pd.DataFrame(datos_2013)
tabla5_2013

tabla5_2013.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2013"
print(tabla5_2013.name)
tabla5_styled = tabla5_2013.style.set_properties(**{'text-align': 'center'})
tabla5_styled

#Filtrar datos para el año 2014 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2014
#Objetivo 2014: Promedio de 2013 menos el 5%
#Crear el DataFrame
#Crear tabla6 --> Datos de 2014
data_2014_pmri = data[(data['Año'] == 2014) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2014 = []
peligros_total_2014 = []
for mes in meses:
    hht_total_mes = data_2014_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2014_pmri[mes].sum()
    hht_total_2014.append(round(hht_total_mes, 2))
    peligros_total_2014.append(round(peligros_total_mes, 2))

tasa_peligros_2014 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2014, hht_total_2014)]
tasa_peligros_2014 = [f'{valor:.2f}' for valor in tasa_peligros_2014]

promedio_tasa_peligros_2014 = round(sum(map(float, tasa_peligros_2014)) / len(tasa_peligros_2014), 2)
promedio_tasa_peligros_2014 = f'{promedio_tasa_peligros_2014:.2f}'

objetivo_2014 = round((1 - 0.05) * float(promedio_tasa_peligros_2013), 2)
objetivo_2014 = f'{objetivo_2014:.2f}'

sd_tasa_peligros_2014 = pd.Series(map(float, tasa_peligros_2014)).std()
sd_tasa_peligros_2014 = f'{sd_tasa_peligros_2014:.2f}'

datos_2014 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2014],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2014],
    'Tasa de Peligros': tasa_peligros_2014,
    'Promedio': promedio_tasa_peligros_2014,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2013) + float(sd_tasa_peligros_2013), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2013) + 2 * float(sd_tasa_peligros_2013), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2013) + 3 * float(sd_tasa_peligros_2013), 2)] * 12,
    'Objetivo 2014': [objetivo_2014] * 12
}
tabla6_2014 = pd.DataFrame(datos_2014)
columnas_numericas_2014 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2014:
    tabla6_2014[col] = tabla6_2014[col].apply(lambda x: f'{float(x):.2f}')

tabla6_2014.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2014"
print(tabla6_2014.name)
tabla6_2014_styled = tabla6_2014.style.set_properties(**{'text-align': 'center'})
tabla6_2014_styled

#Filtrar datos para el año 2015 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2015
#Objetivo 2014: Promedio de 2014 menos el 5%
#Crear el DataFrame
#Crear tabla7 --> Datos de 2015
data_2015_pmri = data[(data['Año'] == 2015) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2015 = []
peligros_total_2015 = []
for mes in meses:
    hht_total_mes = data_2015_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2015_pmri[mes].sum()
    hht_total_2015.append(round(hht_total_mes, 2))
    peligros_total_2015.append(round(peligros_total_mes, 2))

tasa_peligros_2015 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2015, hht_total_2015)]
tasa_peligros_2015 = [f'{valor:.2f}' for valor in tasa_peligros_2015]

promedio_tasa_peligros_2015 = round(sum(map(float, tasa_peligros_2015)) / len(tasa_peligros_2015), 2)
promedio_tasa_peligros_2015 = f'{promedio_tasa_peligros_2015:.2f}'

objetivo_2015 = round((1 - 0.05) * float(promedio_tasa_peligros_2014), 2)
objetivo_2015 = f'{objetivo_2015:.2f}'

sd_tasa_peligros_2015 = pd.Series(map(float, tasa_peligros_2015)).std()
sd_tasa_peligros_2015 = f'{sd_tasa_peligros_2015:.2f}'

datos_2015 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2015],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2015],
    'Tasa de Peligros': tasa_peligros_2015,
    'Promedio': promedio_tasa_peligros_2015,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2014) + float(sd_tasa_peligros_2014), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2014) + 2 * float(sd_tasa_peligros_2014), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2014) + 3 * float(sd_tasa_peligros_2014), 2)] * 12,
    'Objetivo 2015': [objetivo_2015] * 12
}

tabla7_2015 = pd.DataFrame(datos_2015)
columnas_numericas_2015 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2015:
    tabla7_2015[col] = tabla7_2015[col].apply(lambda x: f'{float(x):.2f}')

tabla7_2015.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2015"
print(tabla7_2015.name)
tabla7_2015_styled = tabla7_2015.style.set_properties(**{'text-align': 'center'})
tabla7_2015_styled

#Filtrar datos para el año 2016 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2016
#Objetivo 2016: Promedio de 2015 menos el 5%
#Crear el DataFrame
#Crear tabla8 --> Datos de 2016
data_2016_pmri = data[(data['Año'] == 2016) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2016 = []
peligros_total_2016 = []
for mes in meses:
    hht_total_mes = data_2016_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2016_pmri[mes].sum()
    hht_total_2016.append(round(hht_total_mes, 2))
    peligros_total_2016.append(round(peligros_total_mes, 2))

tasa_peligros_2016 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2016, hht_total_2016)]
tasa_peligros_2016 = [f'{valor:.2f}' for valor in tasa_peligros_2016]

promedio_tasa_peligros_2016 = round(sum(map(float, tasa_peligros_2016)) / len(tasa_peligros_2016), 2)
promedio_tasa_peligros_2016 = f'{promedio_tasa_peligros_2016:.2f}'

objetivo_2016 = round((1 - 0.05) * float(promedio_tasa_peligros_2015), 2)
objetivo_2016 = f'{objetivo_2016:.2f}'

sd_tasa_peligros_2016 = pd.Series(map(float, tasa_peligros_2016)).std()
sd_tasa_peligros_2016 = f'{sd_tasa_peligros_2016:.2f}'

datos_2016 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2016],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2016],
    'Tasa de Peligros': tasa_peligros_2016,
    'Promedio': promedio_tasa_peligros_2016,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2015) + float(sd_tasa_peligros_2015), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2015) + 2 * float(sd_tasa_peligros_2015), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2015) + 3 * float(sd_tasa_peligros_2015), 2)] * 12,
    'Objetivo 2016': [objetivo_2016] * 12
}

tabla8_2016 = pd.DataFrame(datos_2016)
columnas_numericas_2016 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2016:
    tabla8_2016[col] = tabla8_2016[col].apply(lambda x: f'{float(x):.2f}')

tabla8_2016.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2016"
print(tabla8_2016.name)
tabla8_2016_styled = tabla8_2016.style.set_properties(**{'text-align': 'center'})
tabla8_2016_styled

#Filtrar datos para el año 2017 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2017
#Objetivo 2017: Promedio de 2016 menos el 5%
#Crear el DataFrame
#Crear tabla9 --> Datos de 2017
data_2017_pmri = data[(data['Año'] == 2017) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2017 = []
peligros_total_2017 = []

for mes in meses:
    hht_total_mes = data_2017_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2017_pmri[mes].sum()
    hht_total_2017.append(round(hht_total_mes, 2))
    peligros_total_2017.append(round(peligros_total_mes, 2))

tasa_peligros_2017 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2017, hht_total_2017)]
tasa_peligros_2017 = [f'{valor:.2f}' for valor in tasa_peligros_2017]

promedio_tasa_peligros_2017 = round(sum(map(float, tasa_peligros_2017)) / len(tasa_peligros_2017), 2)
promedio_tasa_peligros_2017 = f'{promedio_tasa_peligros_2017:.2f}'

objetivo_2017 = round((1 - 0.05) * float(promedio_tasa_peligros_2016), 2)
objetivo_2017 = f'{objetivo_2017:.2f}'

sd_tasa_peligros_2017 = pd.Series(map(float, tasa_peligros_2017)).std()
sd_tasa_peligros_2017 = f'{sd_tasa_peligros_2017:.2f}'

datos_2017 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2017],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2017],
    'Tasa de Peligros': tasa_peligros_2017,
    'Promedio': promedio_tasa_peligros_2017,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2016) + float(sd_tasa_peligros_2016), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2016) + 2 * float(sd_tasa_peligros_2016), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2016) + 3 * float(sd_tasa_peligros_2016), 2)] * 12,
    'Objetivo 2017': [objetivo_2017] * 12
}

tabla9_2017 = pd.DataFrame(datos_2017)
columnas_numericas_2017 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2017:
    tabla9_2017[col] = tabla9_2017[col].apply(lambda x: f'{float(x):.2f}')

tabla9_2017.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2017"
print(tabla9_2017.name)
tabla9_2017_styled = tabla9_2017.style.set_properties(**{'text-align': 'center'})
tabla9_2017_styled

#Filtrar datos para el año 2018 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2018
#Objetivo 2018: Promedio de 2017 menos el 5%
#Crear el DataFrame
#Crear tabla10 --> Datos de 2018
data_2018_pmri = data[(data['Año'] == 2018) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2018 = []
peligros_total_2018 = []

for mes in meses:
    hht_total_mes = data_2018_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2018_pmri[mes].sum()
    hht_total_2018.append(round(hht_total_mes, 2))
    peligros_total_2018.append(round(peligros_total_mes, 2))

tasa_peligros_2018 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2018, hht_total_2018)]
tasa_peligros_2018 = [f'{valor:.2f}' for valor in tasa_peligros_2018]

promedio_tasa_peligros_2018 = round(sum(map(float, tasa_peligros_2018)) / len(tasa_peligros_2018), 2)
promedio_tasa_peligros_2018 = f'{promedio_tasa_peligros_2018:.2f}'

objetivo_2018 = round((1 - 0.05) * float(promedio_tasa_peligros_2017), 2)
objetivo_2018 = f'{objetivo_2018:.2f}'

sd_tasa_peligros_2018 = pd.Series(map(float, tasa_peligros_2018)).std()
sd_tasa_peligros_2018 = f'{sd_tasa_peligros_2018:.2f}'

datos_2018 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2018],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2018],
    'Tasa de Peligros': tasa_peligros_2018,
    'Promedio': promedio_tasa_peligros_2018,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2017) + float(sd_tasa_peligros_2017), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2017) + 2 * float(sd_tasa_peligros_2017), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2017) + 3 * float(sd_tasa_peligros_2017), 2)] * 12,
    'Objetivo 2018': [objetivo_2018] * 12
}

tabla10_2018 = pd.DataFrame(datos_2018)
columnas_numericas_2018 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2018:
    tabla10_2018[col] = tabla10_2018[col].apply(lambda x: f'{float(x):.2f}')

tabla10_2018.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2018"
print(tabla10_2018.name)
tabla10_2018_styled = tabla10_2018.style.set_properties(**{'text-align': 'center'})
tabla10_2018_styled

#Filtrar datos para el año 2019 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2018
#Objetivo 2019: Promedio de 2018 menos el 5%
#Crear el DataFrame
#Crear tabla11 --> Datos de 2019
data_2019_pmri = data[(data['Año'] == 2019) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2019 = []
peligros_total_2019 = []
for mes in meses:
    hht_total_mes = data_2019_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2019_pmri[mes].sum()
    hht_total_2019.append(round(hht_total_mes, 2))
    peligros_total_2019.append(round(peligros_total_mes, 2))

tasa_peligros_2019 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2019, hht_total_2019)]
tasa_peligros_2019 = [f'{valor:.2f}' for valor in tasa_peligros_2019]

promedio_tasa_peligros_2019 = round(sum(map(float, tasa_peligros_2019)) / len(tasa_peligros_2019), 2)
promedio_tasa_peligros_2019 = f'{promedio_tasa_peligros_2019:.2f}'

objetivo_2019 = round((1 - 0.05) * float(promedio_tasa_peligros_2018), 2)
objetivo_2019 = f'{objetivo_2019:.2f}'

sd_tasa_peligros_2019 = pd.Series(map(float, tasa_peligros_2019)).std()
sd_tasa_peligros_2019 = f'{sd_tasa_peligros_2019:.2f}'

datos_2019 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2019],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2019],
    'Tasa de Peligros': tasa_peligros_2019,
    'Promedio': promedio_tasa_peligros_2019,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2018) + float(sd_tasa_peligros_2018), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2018) + 2 * float(sd_tasa_peligros_2018), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2018) + 3 * float(sd_tasa_peligros_2018), 2)] * 12,
    'Objetivo 2019': [objetivo_2019] * 12
}

tabla11_2019 = pd.DataFrame(datos_2019)
columnas_numericas_2019 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']

for col in columnas_numericas_2019:
    tabla11_2019[col] = tabla11_2019[col].apply(lambda x: f'{float(x):.2f}')

tabla11_2019.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2019"
print(tabla11_2019.name)
tabla11_2019_styled = tabla11_2019.style.set_properties(**{'text-align': 'center'})
tabla11_2019_styled

#Filtrar datos para el año 2020 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2018
#Objetivo 2020: Promedio de 2019 menos el 5%
#Crear el DataFrame
#Crear tabla12 --> Datos de 2020
# Filtrar datos para el año 2020 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
data_2020_pmri = data[(data['Año'] == 2020) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2020 = []
peligros_total_2020 = []
for mes in meses:
    hht_total_mes = data_2020_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2020_pmri[mes].sum()
    hht_total_2020.append(round(hht_total_mes, 2))
    peligros_total_2020.append(round(peligros_total_mes, 2))

tasa_peligros_2020 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2020, hht_total_2020)]
tasa_peligros_2020 = [f'{valor:.2f}' for valor in tasa_peligros_2020]

promedio_tasa_peligros_2020 = round(sum(map(float, tasa_peligros_2020)) / len(tasa_peligros_2020), 2)
promedio_tasa_peligros_2020 = f'{promedio_tasa_peligros_2020:.2f}'

objetivo_2020 = round((1 - 0.05) * float(promedio_tasa_peligros_2019), 2)
objetivo_2020 = f'{objetivo_2020:.2f}'

sd_tasa_peligros_2020 = pd.Series(map(float, tasa_peligros_2020)).std()
sd_tasa_peligros_2020 = f'{sd_tasa_peligros_2020:.2f}'

datos_2020 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2020],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2020],
    'Tasa de Peligros': tasa_peligros_2020,
    'Promedio': promedio_tasa_peligros_2020,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2019) + float(sd_tasa_peligros_2019), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2019) + 2 * float(sd_tasa_peligros_2019), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2019) + 3 * float(sd_tasa_peligros_2019), 2)] * 12,
    'Objetivo 2020': [objetivo_2020] * 12
}

tabla12_2020 = pd.DataFrame(datos_2020)
columnas_numericas_2020 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']

for col in columnas_numericas_2020:
    tabla12_2020[col] = tabla12_2020[col].apply(lambda x: f'{float(x):.2f}')

tabla12_2020.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2020"
print(tabla12_2020.name)
tabla12_2020_styled = tabla12_2020.style.set_properties(**{'text-align': 'center'})
tabla12_2020_styled

#Filtrar datos para el año 2021 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2021
#Objetivo 2021: Promedio de 2020 menos el 5%
#Crear el DataFrame
#Crear tabla13 --> Datos de 2021
data_2021_pmri = data[(data['Año'] == 2021) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2021 = []
peligros_total_2021 = []
for mes in meses:
    hht_total_mes = data_2021_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2021_pmri[mes].sum()
    hht_total_2021.append(round(hht_total_mes, 2))
    peligros_total_2021.append(round(peligros_total_mes, 2))

tasa_peligros_2021 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2021, hht_total_2021)]
tasa_peligros_2021 = [f'{valor:.2f}' for valor in tasa_peligros_2021]

promedio_tasa_peligros_2021 = round(sum(map(float, tasa_peligros_2021)) / len(tasa_peligros_2021), 2)
promedio_tasa_peligros_2021 = f'{promedio_tasa_peligros_2021:.2f}'

objetivo_2021 = round((1 - 0.05) * float(promedio_tasa_peligros_2020), 2)
objetivo_2021 = f'{objetivo_2021:.2f}'

sd_tasa_peligros_2021 = pd.Series(map(float, tasa_peligros_2021)).std()
sd_tasa_peligros_2021 = f'{sd_tasa_peligros_2021:.2f}'

datos_2021 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2021],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2021],
    'Tasa de Peligros': tasa_peligros_2021,
    'Promedio': promedio_tasa_peligros_2021,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2020) + float(sd_tasa_peligros_2020), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2020) + 2 * float(sd_tasa_peligros_2020), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2020) + 3 * float(sd_tasa_peligros_2020), 2)] * 12,
    'Objetivo 2021': [objetivo_2021] * 12
}

tabla13_2021 = pd.DataFrame(datos_2021)
columnas_numericas_2021 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2021:
    tabla13_2021[col] = tabla13_2021[col].apply(lambda x: f'{float(x):.2f}')

tabla13_2021.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2021"
print(tabla13_2021.name)
tabla13_2021_styled = tabla13_2021.style.set_properties(**{'text-align': 'center'})
tabla13_2021_styled

#Filtrar datos para el año 2022 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2022
#Objetivo 2022: Promedio de 2021 menos el 5%
#Crear el DataFrame
#Crear tabla14 --> Datos de 2022
data_2022_pmri = data[(data['Año'] == 2022) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2022 = []
peligros_total_2022 = []
for mes in meses:
    hht_total_mes = data_2022_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2022_pmri[mes].sum()
    hht_total_2022.append(round(hht_total_mes, 2))
    peligros_total_2022.append(round(peligros_total_mes, 2))

tasa_peligros_2022 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2022, hht_total_2022)]
tasa_peligros_2022 = [f'{valor:.2f}' for valor in tasa_peligros_2022]

promedio_tasa_peligros_2022 = round(sum(map(float, tasa_peligros_2022)) / len(tasa_peligros_2022), 2)
promedio_tasa_peligros_2022 = f'{promedio_tasa_peligros_2022:.2f}'

objetivo_2022 = round((1 - 0.05) * float(promedio_tasa_peligros_2021), 2)
objetivo_2022 = f'{objetivo_2022:.2f}'

sd_tasa_peligros_2022 = pd.Series(map(float, tasa_peligros_2022)).std()
sd_tasa_peligros_2022 = f'{sd_tasa_peligros_2022:.2f}'

datos_2022 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2022],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2022],
    'Tasa de Peligros': tasa_peligros_2022,
    'Promedio': promedio_tasa_peligros_2022,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2021) + float(sd_tasa_peligros_2021), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2021) + 2 * float(sd_tasa_peligros_2021), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2021) + 3 * float(sd_tasa_peligros_2021), 2)] * 12,
    'Objetivo 2022': [objetivo_2022] * 12
}

tabla14_2022 = pd.DataFrame(datos_2022)
columnas_numericas_2022 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2022:
    tabla14_2022[col] = tabla14_2022[col].apply(lambda x: f'{float(x):.2f}')

tabla14_2022.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2022"
print(tabla14_2022.name)
tabla14_2022_styled = tabla14_2022.style.set_properties(**{'text-align': 'center'})
tabla14_2022_styled

"""B.1.2 Desarrollo de Indicador de Rendimiento de S.O. --> (**Prueba de Vuelo y Operacional**)"""

#Filtrar datos para el año 20113 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular promedio de la "Tasa de Peligros"
#Calcular SD de la "Tasa de Peligros"
#Crear DataFrame
#Crear tabla1_pvops --> Datos de 2013
data_2013_pvops = data[(data['Año'] == 2013) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2013 = []
peligros_total_pvops_2013 = []
for mes in meses_2013:
    hht_total_mes_pvops_2013 = data_2013_pvops[f'HHT {mes}'].mean()
    peligros_total_mes_pvops_2013 = data_2013_pvops[mes].sum()
    hht_total_pvops_2013.append(round(hht_total_mes_pvops_2013, 2))
    peligros_total_pvops_2013.append(round(peligros_total_mes_pvops_2013, 2))

datos_2013 = {
    'Mes': meses_2013,
    'HHT Total': hht_total_2013,
    'Peligros Total': peligros_total_2013,
    'Tasa de Peligros': tasa_peligros_2013,
    'Promedio': [promedio_tasa_peligros_2013] * 12,
    'SD': [sd_tasa_peligros_2013] * 12
}

tasa_peligros_pvops_2013 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2013, hht_total_pvops_2013)]
tasa_peligros_pvops_2013 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2013]

promedio_tasa_peligros_pvops_2013 = round(sum(map(float, tasa_peligros_pvops_2013)) / len(tasa_peligros_pvops_2013), 2)
promedio_tasa_peligros_pvops_2013 = f'{promedio_tasa_peligros_pvops_2013:.2f}'

sd_tasa_peligros_pvops_2013 = pd.Series(map(float, tasa_peligros_pvops_2013)).std()
sd_tasa_peligros_pvops_2013 = f'{sd_tasa_peligros_pvops_2013:.2f}'

datos_pvops_2013 = {
    'Mes': meses,
    'HHT Total': hht_total_pvops_2013,
    'Peligros Total': peligros_total_pvops_2013,
    'Tasa de Peligros': tasa_peligros_pvops_2013,
    'Promedio': [promedio_tasa_peligros_pvops_2013] * 12,
    'SD': [sd_tasa_peligros_pvops_2013] * 12
}

tabla1_pvops_2013 = pd.DataFrame(datos_pvops_2013)
columnas_numericas_pvops_2013 = ['HHT Total', 'Peligros Total']
for col in columnas_numericas_pvops_2013:
    datos_pvops_2013[col] = [f'{round(float(valor), 2):.2f}' for valor in datos_pvops_2013[col]]
tabla1_pvops_2013.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2013"
print(tabla1_pvops_2013.name)
tabla1_pvops_2013_styled = tabla1_pvops_2013.style.set_properties(**{'text-align': 'center'})
tabla1_pvops_2013_styled

#Filtrar datos para el año 2014 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2014
#Objetivo 2014: Promedio de 2013 menos el 5%
#Crear el DataFrame
#Crear tabla2 --> Datos de 2014
data_2014_pvops = data[(data['Año'] == 2014) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2014 = []
peligros_total_pvops_2014 = []
for mes in meses:
    hht_mes = data_2014_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2014.append(round(hht_mes, 2))

peligros_total_pvops_2014 = []
for mes in meses:
    peligros_mes = data_2014_pvops[mes].sum()
    peligros_total_pvops_2014.append(round(peligros_mes, 2))

tasa_peligros_pvops_2014 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2014, hht_total_pvops_2014)]
tasa_peligros_pvops_2014 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2014]

promedio_tasa_peligros_pvops_2014 = round(sum(map(float, tasa_peligros_pvops_2014)) / len(tasa_peligros_pvops_2014), 2)
promedio_tasa_peligros_pvops_2014 = f'{promedio_tasa_peligros_pvops_2014:.2f}'

objetivo_pvops_2014 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2013), 2)
objetivo_pvops_2014 = f'{objetivo_pvops_2014:.2f}'

sd_tasa_peligros_pvops_2014 = pd.Series(map(float, tasa_peligros_pvops_2014)).std()
sd_tasa_peligros_pvops_2014 = f'{sd_tasa_peligros_pvops_2014:.2f}'

datos_pvops_2014 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2014],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2014],
    'Tasa de Peligros': tasa_peligros_pvops_2014,
    'Promedio': promedio_tasa_peligros_pvops_2014,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2013) + float(sd_tasa_peligros_pvops_2013), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2013) + 2 * float(sd_tasa_peligros_pvops_2013), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2013) + 3 * float(sd_tasa_peligros_pvops_2013), 2)] * 12,
    'Objetivo 2014': [objetivo_2014] * 12
}

tabla2_2014 = pd.DataFrame(datos_pvops_2014)
columnas_numericas_2014 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2014:
    tabla2_2014[col] = tabla2_2014[col].apply(lambda x: f'{float(x):.2f}')

tabla2_2014.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2014"
print(tabla2_2014.name)
tabla2_2014_styled = tabla2_2014.style.set_properties(**{'text-align': 'center'})
tabla2_2014_styled

#Filtrar datos para el año 2015 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2014
#Objetivo 2015: Promedio de 2014 menos el 5%
#Crear el DataFrame
#Crear tabla3 --> Datos de 2015
data_2015_pvops = data[(data['Año'] == 2015) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2015 = []
peligros_total_pvops_2015 = []
for mes in meses:
    hht_mes = data_2015_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2015.append(round(hht_mes, 2))

peligros_total_pvops_2015 = []
for mes in meses:
    peligros_mes = data_2015_pvops[mes].sum()
    peligros_total_pvops_2015.append(round(peligros_mes, 2))

tasa_peligros_pvops_2015 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2015, hht_total_pvops_2015)]
tasa_peligros_pvops_2015 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2015]

promedio_tasa_peligros_pvops_2015 = round(sum(map(float, tasa_peligros_pvops_2015)) / len(tasa_peligros_pvops_2015), 2)
promedio_tasa_peligros_pvops_2015 = f'{promedio_tasa_peligros_pvops_2015:.2f}'

objetivo_pvops_2015 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2014), 2)
objetivo_pvops_2015 = f'{objetivo_pvops_2015:.2f}'

sd_tasa_peligros_pvops_2015 = pd.Series(map(float, tasa_peligros_pvops_2015)).std()
sd_tasa_peligros_pvops_2015 = f'{sd_tasa_peligros_pvops_2015:.2f}'

datos_pvops_2015 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2015],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2015],
    'Tasa de Peligros': tasa_peligros_pvops_2015,
    'Promedio': promedio_tasa_peligros_pvops_2015,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2014) + float(sd_tasa_peligros_pvops_2014), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2014) + 2 * float(sd_tasa_peligros_pvops_2014), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2014) + 3 * float(sd_tasa_peligros_pvops_2014), 2)] * 12,
    'Objetivo 2015': [objetivo_pvops_2015] * 12
}

tabla3_2015 = pd.DataFrame(datos_pvops_2015)
columnas_numericas_2015 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2015:
    tabla3_2015[col] = tabla3_2015[col].apply(lambda x: f'{float(x):.2f}')

tabla3_2015.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2015"
print(tabla3_2015.name)
tabla3_2015_styled = tabla3_2015.style.set_properties(**{'text-align': 'center'})
tabla3_2015_styled

#Filtrar datos para el año 2016 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2016
#Objetivo 2016: Promedio de 2015 menos el 5%
#Crear el DataFrame
#Crear tabla4 --> Datos de 2016
data_2016_pvops = data[(data['Año'] == 2016) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2016 = []
peligros_total_pvops_2016 = []
for mes in meses:
    hht_mes = data_2016_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2016.append(round(hht_mes, 2))

peligros_total_pvops_2016 = []
for mes in meses:
    peligros_mes = data_2016_pvops[mes].sum()
    peligros_total_pvops_2016.append(round(peligros_mes, 2))

tasa_peligros_pvops_2016 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2016, hht_total_pvops_2016)]
tasa_peligros_pvops_2016 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2016]

promedio_tasa_peligros_pvops_2016 = round(sum(map(float, tasa_peligros_pvops_2016)) / len(tasa_peligros_pvops_2016), 2)
promedio_tasa_peligros_pvops_2016 = f'{promedio_tasa_peligros_pvops_2016:.2f}'

objetivo_pvops_2016 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2015), 2)
objetivo_pvops_2016 = f'{objetivo_pvops_2016:.2f}'

sd_tasa_peligros_pvops_2016 = pd.Series(map(float, tasa_peligros_pvops_2016)).std()
sd_tasa_peligros_pvops_2016 = f'{sd_tasa_peligros_pvops_2016:.2f}'

datos_pvops_2016 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2016],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2016],
    'Tasa de Peligros': tasa_peligros_pvops_2016,
    'Promedio': promedio_tasa_peligros_pvops_2016,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2015) + float(sd_tasa_peligros_pvops_2015), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2015) + 2 * float(sd_tasa_peligros_pvops_2015), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2015) + 3 * float(sd_tasa_peligros_pvops_2015), 2)] * 12,
    'Objetivo 2016': [objetivo_pvops_2016] * 12
}

tabla4_2016 = pd.DataFrame(datos_pvops_2016)
columnas_numericas_2016 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2016:
    tabla4_2016[col] = tabla4_2016[col].apply(lambda x: f'{float(x):.2f}')

tabla4_2016.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2016"
print(tabla4_2016.name)
tabla4_2016_styled = tabla4_2016.style.set_properties(**{'text-align': 'center'})
tabla4_2016_styled

#Filtrar datos para el año 2017 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2017
#Objetivo 2017: Promedio de 2016 menos el 5%
#Crear el DataFrame
#Crear tabla5 --> Datos de 2017
data_2017_pvops = data[(data['Año'] == 2017) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2017 = []
peligros_total_pvops_2017 = []
for mes in meses:
    hht_mes = data_2017_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2017.append(round(hht_mes, 2))

peligros_total_pvops_2017 = []
for mes in meses:
    peligros_mes = data_2017_pvops[mes].sum()
    peligros_total_pvops_2017.append(round(peligros_mes, 2))

tasa_peligros_pvops_2017 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2017, hht_total_pvops_2017)]
tasa_peligros_pvops_2017 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2017]

promedio_tasa_peligros_pvops_2017 = round(sum(map(float, tasa_peligros_pvops_2017)) / len(tasa_peligros_pvops_2017), 2)
promedio_tasa_peligros_pvops_2017 = f'{promedio_tasa_peligros_pvops_2017:.2f}'

objetivo_pvops_2017 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2016), 2)
objetivo_pvops_2017 = f'{objetivo_pvops_2017:.2f}'

sd_tasa_peligros_pvops_2017 = pd.Series(map(float, tasa_peligros_pvops_2017)).std()
sd_tasa_peligros_pvops_2017 = f'{sd_tasa_peligros_pvops_2017:.2f}'

datos_pvops_2017 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2017],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2017],
    'Tasa de Peligros': tasa_peligros_pvops_2017,
    'Promedio': promedio_tasa_peligros_pvops_2017,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2016) + float(sd_tasa_peligros_pvops_2016), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2016) + 2 * float(sd_tasa_peligros_pvops_2016), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2016) + 3 * float(sd_tasa_peligros_pvops_2016), 2)] * 12,
    'Objetivo 2017': [objetivo_pvops_2017] * 12
}

tabla5_2017 = pd.DataFrame(datos_pvops_2017)
columnas_numericas_2017 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2017:
    tabla5_2017[col] = tabla5_2017[col].apply(lambda x: f'{float(x):.2f}')

tabla5_2017.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2017"
print(tabla5_2017.name)
tabla5_2017_styled = tabla5_2017.style.set_properties(**{'text-align': 'center'})
tabla5_2017_styled

#Filtrar datos para el año 2018 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2018
#Objetivo 2018: Promedio de 2017 menos el 5%
#Crear el DataFrame
#Crear tabla6 --> Datos de 2018
data_2018_pvops = data[(data['Año'] == 2018) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2018 = []
peligros_total_pvops_2018 = []
for mes in meses:
    hht_mes = data_2018_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2018.append(round(hht_mes, 2))

peligros_total_pvops_2018 = []
for mes in meses:
    peligros_mes = data_2018_pvops[mes].sum()
    peligros_total_pvops_2018.append(round(peligros_mes, 2))

tasa_peligros_pvops_2018 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2018, hht_total_pvops_2018)]
tasa_peligros_pvops_2018 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2018]

promedio_tasa_peligros_pvops_2018 = round(sum(map(float, tasa_peligros_pvops_2018)) / len(tasa_peligros_pvops_2018), 2)
promedio_tasa_peligros_pvops_2018 = f'{promedio_tasa_peligros_pvops_2018:.2f}'

objetivo_pvops_2018 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2017), 2)
objetivo_pvops_2018 = f'{objetivo_pvops_2018:.2f}'

sd_tasa_peligros_pvops_2018 = pd.Series(map(float, tasa_peligros_pvops_2018)).std()
sd_tasa_peligros_pvops_2018 = f'{sd_tasa_peligros_pvops_2018:.2f}'

datos_pvops_2018 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2018],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2018],
    'Tasa de Peligros': tasa_peligros_pvops_2018,
    'Promedio': promedio_tasa_peligros_pvops_2018,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2017) + float(sd_tasa_peligros_pvops_2017), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2017) + 2 * float(sd_tasa_peligros_pvops_2017), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2017) + 3 * float(sd_tasa_peligros_pvops_2017), 2)] * 12,
    'Objetivo 2018': [objetivo_pvops_2018] * 12
}

tabla6_2018 = pd.DataFrame(datos_pvops_2018)
columnas_numericas_2018 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2018:
    tabla6_2018[col] = tabla6_2018[col].apply(lambda x: f'{float(x):.2f}')

tabla6_2018.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2018"
print(tabla6_2018.name)
tabla6_2018_styled = tabla6_2018.style.set_properties(**{'text-align': 'center'})
tabla6_2018_styled

#Filtrar datos para el año 2019 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2019
#Objetivo 2019: Promedio de 2018 menos el 5%
#Crear el DataFrame
#Crear tabla7 --> Datos de 2019
data_2019_pvops = data[(data['Año'] == 2019) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2019 = []
peligros_total_pvops_2019 = []
for mes in meses:
    hht_mes = data_2019_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2019.append(round(hht_mes, 2))

peligros_total_pvops_2019 = []
for mes in meses:
    peligros_mes = data_2019_pvops[mes].sum()
    peligros_total_pvops_2019.append(round(peligros_mes, 2))

tasa_peligros_pvops_2019 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2019, hht_total_pvops_2019)]
tasa_peligros_pvops_2019 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2019]

promedio_tasa_peligros_pvops_2019 = round(sum(map(float, tasa_peligros_pvops_2019)) / len(tasa_peligros_pvops_2019), 2)
promedio_tasa_peligros_pvops_2019 = f'{promedio_tasa_peligros_pvops_2019:.2f}'

objetivo_pvops_2019 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2018), 2)
objetivo_pvops_2019 = f'{objetivo_pvops_2019:.2f}'

sd_tasa_peligros_pvops_2019 = pd.Series(map(float, tasa_peligros_pvops_2019)).std()
sd_tasa_peligros_pvops_2019 = f'{sd_tasa_peligros_pvops_2019:.2f}'

datos_pvops_2019 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2019],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2019],
    'Tasa de Peligros': tasa_peligros_pvops_2019,
    'Promedio': promedio_tasa_peligros_pvops_2019,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2018) + float(sd_tasa_peligros_pvops_2018), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2018) + 2 * float(sd_tasa_peligros_pvops_2018), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2018) + 3 * float(sd_tasa_peligros_pvops_2018), 2)] * 12,
    'Objetivo 2019': [objetivo_pvops_2019] * 12
}

tabla7_2019 = pd.DataFrame(datos_pvops_2019)
columnas_numericas_2019 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2019:
    tabla7_2019[col] = tabla7_2019[col].apply(lambda x: f'{float(x):.2f}')

tabla7_2019.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2019"
print(tabla7_2019.name)
tabla7_2019_styled = tabla7_2019.style.set_properties(**{'text-align': 'center'})
tabla7_2019_styled

#Filtrar datos para el año 2020 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2020
#Objetivo 2020: Promedio de 2019 menos el 5%
#Crear el DataFrame
#Crear tabla8 --> Datos de 2020
data_2020_pvops = data[(data['Año'] == 2020) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2020 = []
peligros_total_pvops_2020 = []
for mes in meses:
    hht_mes = data_2020_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2020.append(round(hht_mes, 2))

peligros_total_pvops_2020 = []
for mes in meses:
    peligros_mes = data_2020_pvops[mes].sum()
    peligros_total_pvops_2020.append(round(peligros_mes, 2))

tasa_peligros_pvops_2020 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2020, hht_total_pvops_2020)]
tasa_peligros_pvops_2020 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2020]

promedio_tasa_peligros_pvops_2020 = round(sum(map(float, tasa_peligros_pvops_2020)) / len(tasa_peligros_pvops_2020), 2)
promedio_tasa_peligros_pvops_2020 = f'{promedio_tasa_peligros_pvops_2020:.2f}'

objetivo_pvops_2020 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2019), 2)
objetivo_pvops_2020 = f'{objetivo_pvops_2020:.2f}'

sd_tasa_peligros_pvops_2020 = pd.Series(map(float, tasa_peligros_pvops_2020)).std()
sd_tasa_peligros_pvops_2020 = f'{sd_tasa_peligros_pvops_2020:.2f}'

datos_pvops_2020 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2020],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2020],
    'Tasa de Peligros': tasa_peligros_pvops_2020,
    'Promedio': promedio_tasa_peligros_pvops_2020,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2019) + float(sd_tasa_peligros_pvops_2019), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2019) + 2 * float(sd_tasa_peligros_pvops_2019), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2019) + 3 * float(sd_tasa_peligros_pvops_2019), 2)] * 12,
    'Objetivo 2020': [objetivo_pvops_2020] * 12
}

tabla8_2020 = pd.DataFrame(datos_pvops_2020)
columnas_numericas_2020 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2020:
    tabla8_2020[col] = tabla8_2020[col].apply(lambda x: f'{float(x):.2f}')

tabla8_2020.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2020"
print(tabla8_2020.name)
tabla8_2020_styled = tabla8_2020.style.set_properties(**{'text-align': 'center'})
tabla8_2020_styled

#Filtrar datos para el año 2021 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2021
#Objetivo 2021: Promedio de 2020 menos el 5%
#Crear el DataFrame
#Crear tabla9 --> Datos de 2021
data_2021_pvops = data[(data['Año'] == 2021) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2021 = []
peligros_total_pvops_2021 = []
for mes in meses:
    hht_mes = data_2021_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2021.append(round(hht_mes, 2))

peligros_total_pvops_2021 = []
for mes in meses:
    peligros_mes = data_2021_pvops[mes].sum()
    peligros_total_pvops_2021.append(round(peligros_mes, 2))

tasa_peligros_pvops_2021 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2021, hht_total_pvops_2021)]
tasa_peligros_pvops_2021 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2021]

promedio_tasa_peligros_pvops_2021 = round(sum(map(float, tasa_peligros_pvops_2021)) / len(tasa_peligros_pvops_2021), 2)
promedio_tasa_peligros_pvops_2021 = f'{promedio_tasa_peligros_pvops_2021:.2f}'

objetivo_pvops_2021 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2020), 2)
objetivo_pvops_2021 = f'{objetivo_pvops_2021:.2f}'

sd_tasa_peligros_pvops_2021 = pd.Series(map(float, tasa_peligros_pvops_2021)).std()
sd_tasa_peligros_pvops_2021 = f'{sd_tasa_peligros_pvops_2021:.2f}'

datos_pvops_2021 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2021],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2021],
    'Tasa de Peligros': tasa_peligros_pvops_2021,
    'Promedio': promedio_tasa_peligros_pvops_2021,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2020) + float(sd_tasa_peligros_pvops_2020), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2020) + 2 * float(sd_tasa_peligros_pvops_2020), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2020) + 3 * float(sd_tasa_peligros_pvops_2020), 2)] * 12,
    'Objetivo 2021': [objetivo_pvops_2021] * 12
}

tabla9_2021 = pd.DataFrame(datos_pvops_2021)
columnas_numericas_2021 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2021:
    tabla9_2021[col] = tabla9_2021[col].apply(lambda x: f'{float(x):.2f}')

tabla9_2021.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2021"
print(tabla9_2021.name)
tabla9_2021_styled = tabla9_2021.style.set_properties(**{'text-align': 'center'})
tabla9_2021_styled

#Filtrar datos para el año 2022 y categoría --> 'Prueba de Vuelo y Operacional'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2022
#Objetivo 2022: Promedio de 2021 menos el 5%
#Crear el DataFrame
#Crear tabla10 --> Datos de 2022
data_2022_pvops = data[(data['Año'] == 2022) & (data['Categoría del Peligro'] == 'Prueba de Vuelo y Operacional')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_pvops_2022 = []
peligros_total_pvops_2022 = []
for mes in meses:
    hht_mes = data_2022_pvops[f'HHT {mes}'].mean()
    hht_total_pvops_2022.append(round(hht_mes, 2))

peligros_total_pvops_2022 = []
for mes in meses:
    peligros_mes = data_2022_pvops[mes].sum()
    peligros_total_pvops_2022.append(round(peligros_mes, 2))

tasa_peligros_pvops_2022 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_pvops_2022, hht_total_pvops_2022)]
tasa_peligros_pvops_2022 = [f'{valor:.2f}' for valor in tasa_peligros_pvops_2022]

promedio_tasa_peligros_pvops_2022 = round(sum(map(float, tasa_peligros_pvops_2022)) / len(tasa_peligros_pvops_2022), 2)
promedio_tasa_peligros_pvops_2022 = f'{promedio_tasa_peligros_pvops_2022:.2f}'

objetivo_pvops_2022 = round((1 - 0.05) * float(promedio_tasa_peligros_pvops_2021), 2)
objetivo_pvops_2022 = f'{objetivo_pvops_2022:.2f}'

sd_tasa_peligros_pvops_2022 = pd.Series(map(float, tasa_peligros_pvops_2022)).std()
sd_tasa_peligros_pvops_2022 = f'{sd_tasa_peligros_pvops_2022:.2f}'

datos_pvops_2022 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_pvops_2022],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_pvops_2022],
    'Tasa de Peligros': tasa_peligros_pvops_2022,
    'Promedio': promedio_tasa_peligros_pvops_2022,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_pvops_2021) + float(sd_tasa_peligros_pvops_2021), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_pvops_2021) + 2 * float(sd_tasa_peligros_pvops_2021), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_pvops_2021) + 3 * float(sd_tasa_peligros_pvops_2021), 2)] * 12,
    'Objetivo 2022': [objetivo_pvops_2022] * 12
}

tabla10_2022 = pd.DataFrame(datos_pvops_2022)
columnas_numericas_2022 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2022:
    tabla10_2022[col] = tabla10_2022[col].apply(lambda x: f'{float(x):.2f}')

tabla10_2022.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Prueba de Vuelo y Operacional) Año 2022"
print(tabla10_2022.name)
tabla10_2022_styled = tabla10_2022.style.set_properties(**{'text-align': 'center'})
tabla10_2022_styled

"""B.1.3 Desarrollo de Indicador de Rendimiento de S.O. --> (**Control Calidad e Inspección**)"""

#Filtrar datos para el año 2013 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular promedio de la "Tasa de Peligros"
#Calcular SD de la "Tasa de Peligros"
#Crear DataFrame
#Crear tabla1_cci --> Datos de 2013
data_2013_cci = data[(data['Año'] == 2013) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2013 = []
for mes in meses:
    hht_mes_cci_2013 = data_2013_cci[f'HHT {mes}'].mean()
    hht_total_cci_2013.append(round(hht_mes_cci_2013, 2))

peligros_total_cci_2013 = []
for mes in meses:
    peligros_mes_cci_2013 = data_2013_cci[mes].sum()
    peligros_total_cci_2013.append(round(peligros_mes_cci_2013, 2))

tasa_peligros_cci_2013 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2013, hht_total_cci_2013)]
tasa_peligros_cci_2013 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2013]

promedio_tasa_peligros_cci_2013 = round(sum(map(float, tasa_peligros_cci_2013)) / len(tasa_peligros_cci_2013), 2)
promedio_tasa_peligros_cci_2013 = f'{promedio_tasa_peligros_cci_2013:.2f}'

sd_tasa_peligros_cci_2013 = pd.Series(map(float, tasa_peligros_cci_2013)).std()
sd_tasa_peligros_cci_2013 = f'{sd_tasa_peligros_cci_2013:.2f}'

datos_cci_2013 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2013],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2013],
    'Tasa de Peligros': tasa_peligros_cci_2013,
    'Promedio': [promedio_tasa_peligros_cci_2013] * 12,
    'SD': [sd_tasa_peligros_cci_2013] * 12
}

tabla1_cci_2013 = pd.DataFrame(datos_cci_2013)
columnas_numericas_cci_2013 = ['HHT Total', 'Peligros Total']
for col in columnas_numericas_cci_2013:
    tabla1_cci_2013[col] = [f'{round(float(valor), 2):.2f}' for valor in tabla1_cci_2013[col]]
tabla1_cci_2013.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2013"
print(tabla1_cci_2013.name)
tabla1_cci_2013_styled = tabla1_cci_2013.style.set_properties(**{'text-align': 'center'})
tabla1_cci_2013_styled

#Filtrar datos para el año 2014 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2014
#Objetivo 2014: Promedio de 2013 menos el 5%
#Crear el DataFrame
#Crear tabla2 --> Datos de 2014
data_2014_cci = data[(data['Año'] == 2014) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2014 = []
peligros_total_cci_2014 = []
for mes in meses:
    hht_mes_cci_2014 = data_2014_cci[f'HHT {mes}'].mean()
    hht_total_cci_2014.append(round(hht_mes_cci_2014, 2))

peligros_total_cci_2014 = []
for mes in meses:
    peligros_mes_cci_2014 = data_2014_cci[mes].sum()
    peligros_total_cci_2014.append(round(peligros_mes_cci_2014, 2))

tasa_peligros_cci_2014 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2014, hht_total_cci_2014)]
tasa_peligros_cci_2014 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2014]

promedio_tasa_peligros_cci_2014 = round(sum(map(float, tasa_peligros_cci_2014)) / len(tasa_peligros_cci_2014), 2)
promedio_tasa_peligros_cci_2014 = f'{promedio_tasa_peligros_cci_2014:.2f}'

objetivo_cci_2014 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2013), 2)
objetivo_cci_2014 = f'{objetivo_cci_2014:.2f}'

sd_tasa_peligros_cci_2014 = pd.Series(map(float, tasa_peligros_cci_2014)).std()
sd_tasa_peligros_cci_2014 = f'{sd_tasa_peligros_cci_2014:.2f}'

datos_cci_2014 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2014],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2014],
    'Tasa de Peligros': tasa_peligros_cci_2014,
    'Promedio': promedio_tasa_peligros_cci_2014,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2013) + float(sd_tasa_peligros_cci_2013), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2013) + 2 * float(sd_tasa_peligros_cci_2013), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2013) + 3 * float(sd_tasa_peligros_cci_2013), 2)] * 12,
    'Objetivo 2014': [objetivo_cci_2014] * 12
}

tabla2_cci_2014 = pd.DataFrame(datos_cci_2014)
columnas_numericas_cci_2014 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2014:
    tabla2_cci_2014[col] = tabla2_cci_2014[col].apply(lambda x: f'{float(x):.2f}')

tabla2_cci_2014.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2014"
print(tabla2_cci_2014.name)
tabla2_cci_2014_styled = tabla2_cci_2014.style.set_properties(**{'text-align': 'center'})
tabla2_cci_2014_styled

#Filtrar datos para el año 2015 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2015
#Objetivo 2015: Promedio de 2014 menos el 5%
#Crear el DataFrame
#Crear tabla2 --> Datos de 2015
data_2015_cci = data[(data['Año'] == 2015) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2015 = []
for mes in meses:
    hht_mes_cci_2015 = data_2015_cci[f'HHT {mes}'].mean()
    hht_total_cci_2015.append(round(hht_mes_cci_2015, 2))

peligros_total_cci_2015 = []
for mes in meses:
    peligros_mes_cci_2015 = data_2015_cci[mes].sum()
    peligros_total_cci_2015.append(round(peligros_mes_cci_2015, 2))

tasa_peligros_cci_2015 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2015, hht_total_cci_2015)]
tasa_peligros_cci_2015 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2015]

promedio_tasa_peligros_cci_2015 = round(sum(map(float, tasa_peligros_cci_2015)) / len(tasa_peligros_cci_2015), 2)
promedio_tasa_peligros_cci_2015 = f'{promedio_tasa_peligros_cci_2015:.2f}'

objetivo_cci_2015 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2014), 2)
objetivo_cci_2015 = f'{objetivo_cci_2015:.2f}'

sd_tasa_peligros_cci_2015 = pd.Series(map(float, tasa_peligros_cci_2015)).std()
sd_tasa_peligros_cci_2015 = f'{sd_tasa_peligros_cci_2015:.2f}'

datos_cci_2015 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2015],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2015],
    'Tasa de Peligros': tasa_peligros_cci_2015,
    'Promedio': promedio_tasa_peligros_cci_2015,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2014) + float(sd_tasa_peligros_cci_2014), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2014) + 2 * float(sd_tasa_peligros_cci_2014), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2014) + 3 * float(sd_tasa_peligros_cci_2014), 2)] * 12,
    'Objetivo 2015': [objetivo_cci_2015] * 12
}

tabla3_cci_2015 = pd.DataFrame(datos_cci_2015)
columnas_numericas_cci_2015 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2015:
    tabla3_cci_2015[col] = tabla3_cci_2015[col].apply(lambda x: f'{float(x):.2f}')

tabla3_cci_2015.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2015"
print(tabla3_cci_2015.name)
tabla3_cci_2015_styled = tabla3_cci_2015.style.set_properties(**{'text-align': 'center'})
tabla3_cci_2015_styled

#Filtrar datos para el año 2016 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2016
#Objetivo 2016: Promedio de 2015 menos el 5%
#Crear el DataFrame
#Crear tabla4 --> Datos de 2016
data_2016_cci = data[(data['Año'] == 2016) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2016 = []
peligros_total_cci_2016 = []
for mes in meses:
    hht_mes_cci_2016 = data_2016_cci[f'HHT {mes}'].mean()
    hht_total_cci_2016.append(round(hht_mes_cci_2016, 2))

peligros_total_cci_2016 = []
for mes in meses:
    peligros_mes_cci_2016 = data_2016_cci[mes].sum()
    peligros_total_cci_2016.append(round(peligros_mes_cci_2016, 2))

tasa_peligros_cci_2016 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2016, hht_total_cci_2016)]
tasa_peligros_cci_2016 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2016]

promedio_tasa_peligros_cci_2016 = round(sum(map(float, tasa_peligros_cci_2016)) / len(tasa_peligros_cci_2016), 2)
promedio_tasa_peligros_cci_2016 = f'{promedio_tasa_peligros_cci_2016:.2f}'

objetivo_cci_2016 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2015), 2)
objetivo_cci_2016 = f'{objetivo_cci_2016:.2f}'

sd_tasa_peligros_cci_2016 = pd.Series(map(float, tasa_peligros_cci_2016)).std()
sd_tasa_peligros_cci_2016 = f'{sd_tasa_peligros_cci_2016:.2f}'

datos_cci_2016 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2016],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2016],
    'Tasa de Peligros': tasa_peligros_cci_2016,
    'Promedio': promedio_tasa_peligros_cci_2016,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2015) + float(sd_tasa_peligros_cci_2015), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2015) + 2 * float(sd_tasa_peligros_cci_2015), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2015) + 3 * float(sd_tasa_peligros_cci_2015), 2)] * 12,
    'Objetivo 2016': [objetivo_cci_2016] * 12
}

tabla4_cci_2016 = pd.DataFrame(datos_cci_2016)
columnas_numericas_cci_2016 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2016:
    tabla4_cci_2016[col] = tabla4_cci_2016[col].apply(lambda x: f'{float(x):.2f}')

tabla4_cci_2016.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2016"
print(tabla4_cci_2016.name)
tabla4_cci_2016_styled = tabla4_cci_2016.style.set_properties(**{'text-align': 'center'})
tabla4_cci_2016_styled

#Filtrar datos para el año 2017 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2017
#Objetivo 2017: Promedio de 2016 menos el 5%
#Crear el DataFrame
#Crear tabla5 --> Datos de 2017
data_2017_cci = data[(data['Año'] == 2017) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2017 = []
peligros_total_cci_2017 = []
for mes in meses:
    hht_mes_cci_2017 = data_2017_cci[f'HHT {mes}'].mean()
    hht_total_cci_2017.append(round(hht_mes_cci_2017, 2))

peligros_total_cci_2017 = []
for mes in meses:
    peligros_mes_cci_2017 = data_2017_cci[mes].sum()
    peligros_total_cci_2017.append(round(peligros_mes_cci_2017, 2))

tasa_peligros_cci_2017 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2017, hht_total_cci_2017)]
tasa_peligros_cci_2017 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2017]

promedio_tasa_peligros_cci_2017 = round(sum(map(float, tasa_peligros_cci_2017)) / len(tasa_peligros_cci_2017), 2)
promedio_tasa_peligros_cci_2017 = f'{promedio_tasa_peligros_cci_2017:.2f}'

objetivo_cci_2017 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2016), 2)
objetivo_cci_2017 = f'{objetivo_cci_2017:.2f}'

sd_tasa_peligros_cci_2017 = pd.Series(map(float, tasa_peligros_cci_2017)).std()
sd_tasa_peligros_cci_2017 = f'{sd_tasa_peligros_cci_2017:.2f}'

datos_cci_2017 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2017],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2017],
    'Tasa de Peligros': tasa_peligros_cci_2017,
    'Promedio': promedio_tasa_peligros_cci_2017,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2016) + float(sd_tasa_peligros_cci_2016), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2016) + 2 * float(sd_tasa_peligros_cci_2016), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2016) + 3 * float(sd_tasa_peligros_cci_2016), 2)] * 12,
    'Objetivo 2017': [objetivo_cci_2017] * 12
}

tabla5_cci_2017 = pd.DataFrame(datos_cci_2017)
columnas_numericas_cci_2017 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2017:
    tabla5_cci_2017[col] = tabla5_cci_2017[col].apply(lambda x: f'{float(x):.2f}')

tabla5_cci_2017.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2017"
print(tabla5_cci_2017.name)
tabla5_cci_2017_styled = tabla5_cci_2017.style.set_properties(**{'text-align': 'center'})
tabla5_cci_2017_styled

#Filtrar datos para el año 2018 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2018
#Objetivo 2018: Promedio de 2017 menos el 5%
#Crear el DataFrame
#Crear tabla6 --> Datos de 2018
data_2018_cci = data[(data['Año'] == 2018) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2018 = []
peligros_total_cci_2018 = []
for mes in meses:
    hht_mes_cci_2018 = data_2018_cci[f'HHT {mes}'].mean()
    hht_total_cci_2018.append(round(hht_mes_cci_2018, 2))

peligros_total_cci_2018 = []
for mes in meses:
    peligros_mes_cci_2018 = data_2018_cci[mes].sum()
    peligros_total_cci_2018.append(round(peligros_mes_cci_2018, 2))

tasa_peligros_cci_2018 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2018, hht_total_cci_2018)]
tasa_peligros_cci_2018 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2018]

promedio_tasa_peligros_cci_2018 = round(sum(map(float, tasa_peligros_cci_2018)) / len(tasa_peligros_cci_2018), 2)
promedio_tasa_peligros_cci_2018 = f'{promedio_tasa_peligros_cci_2018:.2f}'

objetivo_cci_2018 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2017), 2)
objetivo_cci_2018 = f'{objetivo_cci_2018:.2f}'

sd_tasa_peligros_cci_2018 = pd.Series(map(float, tasa_peligros_cci_2018)).std()
sd_tasa_peligros_cci_2018 = f'{sd_tasa_peligros_cci_2018:.2f}'

datos_cci_2018 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2018],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2018],
    'Tasa de Peligros': tasa_peligros_cci_2018,
    'Promedio': promedio_tasa_peligros_cci_2018,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2017) + float(sd_tasa_peligros_cci_2017), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2017) + 2 * float(sd_tasa_peligros_cci_2017), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2017) + 3 * float(sd_tasa_peligros_cci_2017), 2)] * 12,
    'Objetivo 2018': [objetivo_cci_2018] * 12
}

tabla6_cci_2018 = pd.DataFrame(datos_cci_2018)
columnas_numericas_cci_2018 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2018:
    tabla6_cci_2018[col] = tabla6_cci_2018[col].apply(lambda x: f'{float(x):.2f}')

tabla6_cci_2018.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2018"
print(tabla6_cci_2018.name)
tabla6_cci_2018_styled = tabla6_cci_2018.style.set_properties(**{'text-align': 'center'})
tabla6_cci_2018_styled

#Filtrar datos para el año 2019 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2018
#Objetivo 2019: Promedio de 2018 menos el 5%
#Crear el DataFrame
#Crear tabla7 --> Datos de 2019
data_2019_cci = data[(data['Año'] == 2019) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2019 = []
peligros_total_cci_2019 = []
for mes in meses:
    hht_mes_cci_2019 = data_2019_cci[f'HHT {mes}'].mean()
    hht_total_cci_2019.append(round(hht_mes_cci_2019, 2))

peligros_total_cci_2019 = []
for mes in meses:
    peligros_mes_cci_2019 = data_2019_cci[mes].sum()
    peligros_total_cci_2019.append(round(peligros_mes_cci_2019, 2))

tasa_peligros_cci_2019 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2019, hht_total_cci_2019)]
tasa_peligros_cci_2019 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2019]

promedio_tasa_peligros_cci_2019 = round(sum(map(float, tasa_peligros_cci_2019)) / len(tasa_peligros_cci_2019), 2)
promedio_tasa_peligros_cci_2019 = f'{promedio_tasa_peligros_cci_2019:.2f}'

objetivo_cci_2019 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2018), 2)
objetivo_cci_2019 = f'{objetivo_cci_2019:.2f}'

sd_tasa_peligros_cci_2019 = pd.Series(map(float, tasa_peligros_cci_2019)).std()
sd_tasa_peligros_cci_2019 = f'{sd_tasa_peligros_cci_2019:.2f}'

datos_cci_2019 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2019],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2019],
    'Tasa de Peligros': tasa_peligros_cci_2019,
    'Promedio': promedio_tasa_peligros_cci_2019,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2018) + float(sd_tasa_peligros_cci_2018), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2018) + 2 * float(sd_tasa_peligros_cci_2018), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2018) + 3 * float(sd_tasa_peligros_cci_2018), 2)] * 12,
    'Objetivo 2019': [objetivo_cci_2019] * 12
}

tabla7_cci_2019 = pd.DataFrame(datos_cci_2019)
columnas_numericas_cci_2019 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2019:
    tabla7_cci_2019[col] = tabla7_cci_2019[col].apply(lambda x: f'{float(x):.2f}')

tabla7_cci_2019.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2019"
print(tabla7_cci_2019.name)
tabla7_cci_2019_styled = tabla7_cci_2019.style.set_properties(**{'text-align': 'center'})
tabla7_cci_2019_styled

#Filtrar datos para el año 2020 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2020
#Objetivo 2020: Promedio de 2019 menos el 5%
#Crear el DataFrame
#Crear tabla8 --> Datos de 2020
data_2020_cci = data[(data['Año'] == 2020) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2020 = []
peligros_total_cci_2020 = []
for mes in meses:
    hht_mes_cci_2020 = data_2020_cci[f'HHT {mes}'].mean()
    hht_total_cci_2020.append(round(hht_mes_cci_2020, 2))

peligros_total_cci_2020 = []
for mes in meses:
    peligros_mes_cci_2020 = data_2020_cci[mes].sum()
    peligros_total_cci_2020.append(round(peligros_mes_cci_2020, 2))

tasa_peligros_cci_2020 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2020, hht_total_cci_2020)]
tasa_peligros_cci_2020 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2020]

promedio_tasa_peligros_cci_2020 = round(sum(map(float, tasa_peligros_cci_2020)) / len(tasa_peligros_cci_2020), 2)
promedio_tasa_peligros_cci_2020 = f'{promedio_tasa_peligros_cci_2020:.2f}'

objetivo_cci_2020 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2019), 2)
objetivo_cci_2020 = f'{objetivo_cci_2020:.2f}'

sd_tasa_peligros_cci_2020 = pd.Series(map(float, tasa_peligros_cci_2020)).std()
sd_tasa_peligros_cci_2020 = f'{sd_tasa_peligros_cci_2020:.2f}'

datos_cci_2020 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2020],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2020],
    'Tasa de Peligros': tasa_peligros_cci_2020,
    'Promedio': promedio_tasa_peligros_cci_2020,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2019) + float(sd_tasa_peligros_cci_2019), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2019) + 2 * float(sd_tasa_peligros_cci_2019), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2019) + 3 * float(sd_tasa_peligros_cci_2019), 2)] * 12,
    'Objetivo 2020': [objetivo_cci_2020] * 12
}

tabla8_cci_2020 = pd.DataFrame(datos_cci_2020)
columnas_numericas_cci_2020 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2020:
    tabla8_cci_2020[col] = tabla8_cci_2020[col].apply(lambda x: f'{float(x):.2f}')

tabla8_cci_2020.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2020"
print(tabla8_cci_2020.name)
tabla8_cci_2020_styled = tabla8_cci_2020.style.set_properties(**{'text-align': 'center'})
tabla8_cci_2020_styled

#Filtrar datos para el año 2021 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2021
#Objetivo 2021: Promedio de 2020 menos el 5%
#Crear el DataFrame
#Crear tabla9 --> Datos de 2021
data_2021_cci = data[(data['Año'] == 2021) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2021 = []
peligros_total_cci_2021 = []
for mes in meses:
    hht_mes_cci_2021 = data_2021_cci[f'HHT {mes}'].mean()
    hht_total_cci_2021.append(round(hht_mes_cci_2021, 2))

peligros_total_cci_2021 = []
for mes in meses:
    peligros_mes_cci_2021 = data_2021_cci[mes].sum()
    peligros_total_cci_2021.append(round(peligros_mes_cci_2021, 2))

tasa_peligros_cci_2021 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2021, hht_total_cci_2021)]
tasa_peligros_cci_2021 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2021]

promedio_tasa_peligros_cci_2021 = round(sum(map(float, tasa_peligros_cci_2021)) / len(tasa_peligros_cci_2021), 2)
promedio_tasa_peligros_cci_2021 = f'{promedio_tasa_peligros_cci_2021:.2f}'

objetivo_cci_2021 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2020), 2)
objetivo_cci_2021 = f'{objetivo_cci_2021:.2f}'

sd_tasa_peligros_cci_2021 = pd.Series(map(float, tasa_peligros_cci_2021)).std()
sd_tasa_peligros_cci_2021 = f'{sd_tasa_peligros_cci_2021:.2f}'

datos_cci_2021 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2021],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2021],
    'Tasa de Peligros': tasa_peligros_cci_2021,
    'Promedio': promedio_tasa_peligros_cci_2021,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2020) + float(sd_tasa_peligros_cci_2020), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2020) + 2 * float(sd_tasa_peligros_cci_2020), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2020) + 3 * float(sd_tasa_peligros_cci_2020), 2)] * 12,
    'Objetivo 2021': [objetivo_cci_2021] * 12
}

tabla9_cci_2021 = pd.DataFrame(datos_cci_2021)
columnas_numericas_cci_2021 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2021:
    tabla9_cci_2021[col] = tabla9_cci_2021[col].apply(lambda x: f'{float(x):.2f}')

tabla9_cci_2021.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2021"
print(tabla9_cci_2021.name)
tabla9_cci_2021_styled = tabla9_cci_2021.style.set_properties(**{'text-align': 'center'})
tabla9_cci_2021_styled

#Filtrar datos para el año 2022 y categoría --> 'Control Calidad e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Calcular Promedio de la "Tasa de Peligros" de 2022
#Objetivo 2022: Promedio de 2021 menos el 5%
#Crear el DataFrame
#Crear tabla10 --> Datos de 2022
data_2022_cci = data[(data['Año'] == 2022) & (data['Categoría del Peligro'] == 'Control Calidad e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_cci_2022 = []
peligros_total_cci_2022 = []
for mes in meses:
    hht_mes_cci_2022 = data_2022_cci[f'HHT {mes}'].mean()
    hht_total_cci_2022.append(round(hht_mes_cci_2022, 2))

peligros_total_cci_2022 = []
for mes in meses:
    peligros_mes_cci_2022 = data_2022_cci[mes].sum()
    peligros_total_cci_2022.append(round(peligros_mes_cci_2022, 2))

tasa_peligros_cci_2022 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_cci_2022, hht_total_cci_2022)]
tasa_peligros_cci_2022 = [f'{valor:.2f}' for valor in tasa_peligros_cci_2022]

promedio_tasa_peligros_cci_2022 = round(sum(map(float, tasa_peligros_cci_2022)) / len(tasa_peligros_cci_2022), 2)
promedio_tasa_peligros_cci_2022 = f'{promedio_tasa_peligros_cci_2022:.2f}'

objetivo_cci_2022 = round((1 - 0.05) * float(promedio_tasa_peligros_cci_2021), 2)
objetivo_cci_2022 = f'{objetivo_cci_2022:.2f}'

sd_tasa_peligros_cci_2022 = pd.Series(map(float, tasa_peligros_cci_2022)).std()
sd_tasa_peligros_cci_2022 = f'{sd_tasa_peligros_cci_2022:.2f}'

datos_cci_2022 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_cci_2022],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_cci_2022],
    'Tasa de Peligros': tasa_peligros_cci_2022,
    'Promedio': promedio_tasa_peligros_cci_2022,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_cci_2021) + float(sd_tasa_peligros_cci_2021), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_cci_2021) + 2 * float(sd_tasa_peligros_cci_2021), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_cci_2021) + 3 * float(sd_tasa_peligros_cci_2021), 2)] * 12,
    'Objetivo 2022': [objetivo_cci_2022] * 12
}

tabla10_cci_2022 = pd.DataFrame(datos_cci_2022)
columnas_numericas_cci_2022 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_cci_2022:
    tabla10_cci_2022[col] = tabla10_cci_2022[col].apply(lambda x: f'{float(x):.2f}')

tabla10_cci_2022.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Control Calidad e Inspección) Año 2022"
print(tabla10_cci_2022.name)
tabla10_cci_2022_styled = tabla10_cci_2022.style.set_properties(**{'text-align': 'center'})
tabla10_cci_2022_styled

"""C. Elaborar **Diagrama**-->**Indicadores de Rendimiento de Seguridad Operacional**

C.1 Información de refencia --> **Hojas de Datos** calculadas en el Literal B.

C.1.1 Desarrollo de Diagrama de Indicador de Rendimiento de S.O. --> **(Procedimientos de Mantenimiento, Reparación e Inspección)**

*   2013-->Año (Inicial) de referencia
*   2014-2022-->Comportamiento del Indicador en el Tiempo

a. Año (Inicial) de referencia: Diagrama del Indicador --> **2013**
"""

#Obtener meses y tasas de peligros desde --> tabla5_2013
#Crear gráfico --> Diagrama PMRI 2013
meses_2013 = tabla5_2013['Mes']
tasas_peligros_2013 = tabla5_2013['Tasa de Peligros'].astype(float)
promedio_tasa_peligros_2013 = float(tabla5_2013['Promedio'][0])

plt.figure(figsize=(12, 2))
plt.plot(meses_2013, tasas_peligros_2013, marker='o', label='Tasa de Peligros')
plt.axhline(y=promedio_tasa_peligros_2013, color='r', linestyle='--', label='Promedio')
plt.xlabel('Meses')
plt.ylabel('Tasa de Peligros')
plt.title('Procedimientos de Mantenimiento, Reparación e Inspección - Año 2013')
plt.legend()
plt.legend(loc='upper right', bbox_to_anchor=(1.208, 1))
plt.grid(True)
plt.show()

"""b. Comportamiento del Indicador en el Tiempo: Diagrama de los Indicadores-->**2014-2022**"""

#Crear diccionario con tablas de datos
#Iterar a través de tablas y crear gráficos
#Extraer datos necesarios para el gráfico
#Crear gráfico --> Diagrama de Indicador (Procedimientos de Mantenimiento, Reparación e Inspección) PMRI 2014-2022
tablas = {
    '2014': tabla6_2014,
    '2015': tabla7_2015,
    '2016': tabla8_2016,
    '2017': tabla9_2017,
    '2018': tabla10_2018,
    '2019': tabla11_2019,
    '2020': tabla12_2020,
    '2021': tabla13_2021,
    '2022': tabla14_2022
}

fig, axs = plt.subplots(nrows=len(tablas), ncols=1, figsize=(12, 4 * len(tablas)))
plt.subplots_adjust(hspace=0.5)

for i, (anio, tabla) in enumerate(tablas.items()):
    ax = axs[i]

    meses = tabla['Mes']
    tasa_peligros = tabla['Tasa de Peligros'].astype(float)
    prom_anio_anterior = tabla['Promedio'].astype(float)
    prom_anio_ant_1sd = tabla['Prom Año Ant +1SD'].astype(float)
    prom_anio_ant_2sd = tabla['Prom Año Ant +2SD'].astype(float)
    prom_anio_ant_3sd = tabla['Prom Año Ant +3SD'].astype(float)

    ax.plot(meses, tasa_peligros, label='Tasa de Peligros', marker='o', color='black')
    ax.plot(meses, prom_anio_anterior, label='Promedio Año Anterior', linestyle='--', marker='o', color='green')
    ax.plot(meses, prom_anio_ant_1sd, label='Prom Año Ant +1SD', linestyle='--', marker='o', color='yellow')
    ax.plot(meses, prom_anio_ant_2sd, label='Prom Año Ant +2SD', linestyle='--', marker='o', color='orange')
    ax.plot(meses, prom_anio_ant_3sd, label='Prom Año Ant +3SD', linestyle='--', marker='o', color='red')

    ax.set_title(f'Procedimientos de Mantenimiento, Reparación e Inspección - Año {anio}')
    ax.set_xlabel('Meses')
    ax.set_ylabel('Tasa de Peligros')
    ax.legend(loc='upper right', bbox_to_anchor=(1.208, 1))
    ax.grid(True, linestyle='--')

plt.show()

"""C.1.2 Desarrollo de Diagrama de Indicador de Rendimiento de S.O. --> **(Prueba de Vuelo y Operacional)**

*   2013-->Año (Inicial) de referencia
*   2014-2022-->Comportamiento del Indicador en el Tiempo

a. Año (Inicial) de referencia: Diagrama del Indicador --> 2013
"""

#Obtener meses y tasas de peligros desde --> tabla1_pvops_2013
#Crear gráfico --> Diagrama PVOPS 2013
meses_2013 = tabla1_pvops_2013['Mes']
tasa_peligros_pvops_2013 = tabla1_pvops_2013['Tasa de Peligros'].astype(float)
promedio_tasa_peligros_pvops_2013 = float(tabla1_pvops_2013['Promedio'][0])

plt.figure(figsize=(12, 2))
plt.plot(meses_2013, tasa_peligros_pvops_2013, marker='o', label='Tasa de Peligros')
plt.axhline(y=promedio_tasa_peligros_pvops_2013, color='r', linestyle='--', label='Promedio')
plt.xlabel('Meses')
plt.ylabel('Tasa de Peligros')
plt.title('Prueba de Vuelo y Operacional - Año 2013')
plt.legend()
plt.legend(loc='upper right', bbox_to_anchor=(1.208, 1))
plt.grid(True)
plt.show()

"""b. Comportamiento del Indicador en el Tiempo: Diagrama de los Indicadores-->**2014-2022**"""

#Crear diccionario con tablas de datos
#Iterar a través de tablas y crear gráficos
#Extraer datos necesarios para el gráfico
#Crear gráfico --> Diagrama de Indicador (Procedimientos de Mantenimiento, Reparación e Inspección) PVOPS 2014-2022
tablas = {
    '2014': tabla2_2014,
    '2015': tabla3_2015,
    '2016': tabla4_2016,
    '2017': tabla5_2017,
    '2018': tabla6_2018,
    '2019': tabla7_2019,
    '2020': tabla8_2020,
    '2021': tabla9_2021,
    '2022': tabla10_2022
}

fig, axs = plt.subplots(nrows=len(tablas), ncols=1, figsize=(12, 4 * len(tablas)))
plt.subplots_adjust(hspace=0.5)

for i, (anio, tabla) in enumerate(tablas.items()):
    ax = axs[i]

    meses = tabla['Mes']
    tasa_peligros = tabla['Tasa de Peligros'].astype(float)
    prom_anio_anterior = tabla['Promedio'].astype(float)
    prom_anio_ant_1sd = tabla['Prom Año Ant +1SD'].astype(float)
    prom_anio_ant_2sd = tabla['Prom Año Ant +2SD'].astype(float)
    prom_anio_ant_3sd = tabla['Prom Año Ant +3SD'].astype(float)

    ax.plot(meses, tasa_peligros, label='Tasa de Peligros', marker='o', color='black')
    ax.plot(meses, prom_anio_anterior, label='Promedio Año Anterior', linestyle='--', marker='o', color='green')
    ax.plot(meses, prom_anio_ant_1sd, label='Prom Año Ant +1SD', linestyle='--', marker='o', color='yellow')
    ax.plot(meses, prom_anio_ant_2sd, label='Prom Año Ant +2SD', linestyle='--', marker='o', color='orange')
    ax.plot(meses, prom_anio_ant_3sd, label='Prom Año Ant +3SD', linestyle='--', marker='o', color='red')

    ax.set_title(f'Prueba de Vuelo y Operacional - Año {anio}')
    ax.set_xlabel('Meses')
    ax.set_ylabel('Tasa de Peligros')
    ax.legend(loc='upper right', bbox_to_anchor=(1.208, 1))
    ax.grid(True, linestyle='--')

plt.show()

"""C.1.3 Desarrollo de Diagrama de Indicador de Rendimiento de S.O. --> **(Control Calidad e Inspección)**

*   2013-->Año (Inicial) de referencia
*   2014-2022-->Comportamiento del Indicador en el Tiempo

a. Año (Inicial) de referencia: Diagrama del Indicador --> 2013
"""

#Obtener meses y tasas de peligros desde --> tabla1_cci_2013
#Crear gráfico --> Diagrama CCI 2013
meses_2013 = tabla1_cci_2013['Mes']
tasa_peligros_cci_2013 = tabla1_cci_2013['Tasa de Peligros'].astype(float)
promedio_tasa_peligros_cci_2013 = float(tabla1_cci_2013['Promedio'][0])

plt.figure(figsize=(12, 2))
plt.plot(meses_2013, tasa_peligros_cci_2013, marker='o', label='Tasa de Peligros')
plt.axhline(y=promedio_tasa_peligros_cci_2013, color='r', linestyle='--', label='Promedio')
plt.xlabel('Meses')
plt.ylabel('Tasa de Peligros')
plt.title('Control Calidad e Inspección - Año 2013')
plt.legend()
plt.legend(loc='upper right', bbox_to_anchor=(1.208, 1))
plt.grid(True)
plt.show()

"""b. Comportamiento del Indicador en el Tiempo: Diagrama de los Indicadores-->2014-2022"""

#Crear diccionario con tablas de datos
#Iterar a través de tablas y crear gráficos
#Extraer datos necesarios para el gráfico
#Crear gráfico --> Diagrama de Indicador (Control Calidad e Inspección) CCI 2014-2022
tablas = {
    '2014': tabla2_cci_2014,
    '2015': tabla3_cci_2015,
    '2016': tabla4_cci_2016,
    '2017': tabla5_cci_2017,
    '2018': tabla6_cci_2018,
    '2019': tabla7_cci_2019,
    '2020': tabla8_cci_2020,
    '2021': tabla9_cci_2021,
    '2022': tabla10_cci_2022
}

fig, axs = plt.subplots(nrows=len(tablas), ncols=1, figsize=(12, 4 * len(tablas)))
plt.subplots_adjust(hspace=0.5)

for i, (anio, tabla) in enumerate(tablas.items()):
    ax = axs[i]

    meses = tabla['Mes']
    tasa_peligros = tabla['Tasa de Peligros'].astype(float)
    prom_anio_anterior = tabla['Promedio'].astype(float)
    prom_anio_ant_1sd = tabla['Prom Año Ant +1SD'].astype(float)
    prom_anio_ant_2sd = tabla['Prom Año Ant +2SD'].astype(float)
    prom_anio_ant_3sd = tabla['Prom Año Ant +3SD'].astype(float)

    ax.plot(meses, tasa_peligros, label='Tasa de Peligros', marker='o', color='black')
    ax.plot(meses, prom_anio_anterior, label='Promedio Año Anterior', linestyle='--', marker='o', color='green')
    ax.plot(meses, prom_anio_ant_1sd, label='Prom Año Ant +1SD', linestyle='--', marker='o', color='yellow')
    ax.plot(meses, prom_anio_ant_2sd, label='Prom Año Ant +2SD', linestyle='--', marker='o', color='orange')
    ax.plot(meses, prom_anio_ant_3sd, label='Prom Año Ant +3SD', linestyle='--', marker='o', color='red')

    ax.set_title(f'Control Calidad e Inspección - Año {anio}')
    ax.set_xlabel('Meses')
    ax.set_ylabel('Tasa de Peligros')
    ax.legend(loc='upper right', bbox_to_anchor=(1.208, 1))
    ax.grid(True, linestyle='--')

plt.show()

"""D. **Concatenar** todas las tablas en un solo dataset --> **tabla_datos**

D.1 Crear para cada Tabla de Datos: Columna --> Año
"""

#Lista de las tablas que deseas modificar
#Agregar la columna "Año" a cada tabla
#Mostrar una tabla de ejemplo para verificar los cambios
tablas = [tabla6_2014, tabla7_2015, tabla8_2016, tabla9_2017, tabla10_2018, tabla11_2019, tabla12_2020, tabla13_2021, tabla14_2022,
          tabla2_cci_2014, tabla3_cci_2015, tabla4_cci_2016, tabla5_cci_2017, tabla6_cci_2018, tabla7_cci_2019, tabla8_cci_2020, tabla9_cci_2021, tabla10_cci_2022,
          tabla2_2014, tabla3_2015, tabla4_2016, tabla5_2017, tabla6_2018, tabla7_2019, tabla8_2020, tabla9_2021, tabla10_2022]

for tabla in tablas:
    year = int(tabla.name.split()[-1])
    tabla.insert(0, 'Año', year)

print(tabla6_2014)

#Concatenar todas las tablas en un solo DataFrame --> tablas_datos
tablas = [tabla6_2014, tabla7_2015, tabla8_2016, tabla9_2017, tabla10_2018, tabla11_2019, tabla12_2020, tabla13_2021, tabla14_2022,
          tabla2_cci_2014, tabla3_cci_2015, tabla4_cci_2016, tabla5_cci_2017, tabla6_cci_2018, tabla7_cci_2019, tabla8_cci_2020, tabla9_cci_2021, tabla10_cci_2022,
          tabla2_2014, tabla3_2015, tabla4_2016, tabla5_2017, tabla6_2018, tabla7_2019, tabla8_2020, tabla9_2021, tabla10_2022]

tablas_datos = pd.concat(tablas, ignore_index=True)
tablas_datos

# Lista de nombres de columnas a eliminar
columnas_a_eliminar = [f'Objetivo {anio}' for anio in range(2014, 2023)]

# Eliminar las columnas
tablas_datos = tablas_datos.drop(columns=columnas_a_eliminar)

#Imprimir nombres de columnas con # índice
for i, columna in enumerate(tablas_datos.columns):
    print(f'Columna {i}: {columna}')

"""2. **Pre-Procesamiento de los Datos**

2.1 Partición del dataset en los subsets de entrenamiento, validación y prueba
"""

#Craer función --> entrenamiento, validación y prueba
#Definir número de datos en cada subserie
#Realizar partición
def train_val_test_split(serie, tr_size=0.8, vl_size=0.1, ts_size=0.1):

    N = serie.shape[0]
    Ntrain = int(tr_size * N)
    Nval = int(vl_size * N)
    Ntst = N - Ntrain - Nval

    train = serie[0:Ntrain]
    val = serie[Ntrain:Ntrain + Nval]
    test = serie[Ntrain + Nval:]

    return train, val, test

#Imprimir tamaño de cada subset (train, val, test)
#Seleccionar Columna --> Tasa de Peligros
tr, vl, ts = train_val_test_split(tablas_datos['Tasa de Peligros'])
print(f'Tamaño set de entrenamiento: {tr.shape}')
print(f'Tamaño set de validación: {vl.shape}')
print(f'Tamaño set de prueba: {ts.shape}')

#Visualización (train, val, test)
tr = tr.astype(float)
vl = vl.astype(float)
ts = ts.astype(float)
fig, ax = plt.subplots(figsize=(15, 2))
ax.plot(tr, label='train')
ax.plot(vl, label='val')
ax.plot(ts, label='test')
plt.legend()
ax.set_ylim(0.3, 1.7)
plt.show()

"""2.2 Generación del dataset supervisado (entradas y salidas del modelo)


"""

def crear_dataset_supervisado(array, input_length, output_length):

    # Inicialización
    X, Y = [], []    # Listados que contendrán los datos de entrada y salida del modelo
    shape = array.shape
    if len(shape)==1: # Si tenemos sólo una serie (univariado)
        fils, cols = array.shape[0], 1
        array = array.reshape(fils,cols)
    else: # Multivariado
        fils, cols = array.shape

    # Generar los arreglos
    for i in range(fils-input_length-output_length):
        X.append(array[i:i+INPUT_LENGTH,0:cols])
        Y.append(array[i+input_length:i+input_length+output_length,-1].reshape(output_length,1))

    # Convertir listas a arreglos de NumPy
    X = np.array(X)
    Y = np.array(Y)

    return X, Y

#Definición --> Hiperparámetros INPUT_LENGTH y OUTPUT_LENGTH
#Datasets supervisados para entrenamiento --> (x_tr, y_tr), validación (x_vl, y_vl) y prueba (x_ts, y_ts)
INPUT_LENGTH = 12    # Registros de 12 meses consecutivos a la entrada
OUTPUT_LENGTH = 12    # El modelo va a predecir 12 meses a futuro --> Año 2023

x_tr, y_tr = crear_dataset_supervisado(tr.values, INPUT_LENGTH, OUTPUT_LENGTH)
x_vl, y_vl = crear_dataset_supervisado(vl.values, INPUT_LENGTH, OUTPUT_LENGTH)
x_ts, y_ts = crear_dataset_supervisado(ts.values, INPUT_LENGTH, OUTPUT_LENGTH)

print('Tamaños entrada (BATCHES x INPUT_LENGTH x FEATURES) y de salida (BATCHES x OUTPUT_LENGTH x FEATURES)')
print(f'Set de entrenamiento - x_tr: {x_tr.shape}, y_tr: {y_tr.shape}')
print(f'Set de validación - x_vl: {x_vl.shape}, y_vl: {y_vl.shape}')
print(f'Set de prueba - x_ts: {x_ts.shape}, y_ts: {y_ts.shape}')

"""2.3 Escalamiento de los datos"""

#Generar listado con (scalers) --> En este escenario: 1 escalador<-->1 característica
#Definir los Arrays que contendrán datasets escalados
#min/max set de entrenamiento --> escalar la totalidad de los datasets
#Definir un dicc de salida
#Crear dicc de entrada
#Realizar verificación de escalamiento de datos
from sklearn.preprocessing import MinMaxScaler

def escalar_dataset(data_input):
    NFEATS = data_input['x_tr'].shape[2]

    scalers = [MinMaxScaler(feature_range=(-1,1)) for i in range(NFEATS)]

    x_tr_s = np.zeros(data_input['x_tr'].shape)
    x_vl_s = np.zeros(data_input['x_vl'].shape)
    x_ts_s = np.zeros(data_input['x_ts'].shape)
    y_tr_s = np.zeros(data_input['y_tr'].shape)
    y_vl_s = np.zeros(data_input['y_vl'].shape)
    y_ts_s = np.zeros(data_input['y_ts'].shape)

    for i in range(NFEATS):
        x_tr_s[:,:,i] = scalers[i].fit_transform(x_tr[:,:,i])
        x_vl_s[:,:,i] = scalers[i].transform(x_vl[:,:,i])
        x_ts_s[:,:,i] = scalers[i].transform(x_ts[:,:,i])

    y_tr_s[:,:,0] = scalers[-1].fit_transform(y_tr[:,:,0])
    y_vl_s[:,:,0] = scalers[-1].transform(y_vl[:,:,0])
    y_ts_s[:,:,0] = scalers[-1].transform(y_ts[:,:,0])

    data_scaled = {
        'x_tr_s': x_tr_s, 'y_tr_s': y_tr_s,
        'x_vl_s': x_vl_s, 'y_vl_s': y_vl_s,
        'x_ts_s': x_ts_s, 'y_ts_s': y_ts_s,
    }

    return data_scaled, scalers[0]

data_in = {
    'x_tr': x_tr, 'y_tr': y_tr,
    'x_vl': x_vl, 'y_vl': y_vl,
    'x_ts': x_ts, 'y_ts': y_ts,
}

data_s, scaler = escalar_dataset(data_in)

x_tr_s, y_tr_s = data_s['x_tr_s'], data_s['y_tr_s']
x_vl_s, y_vl_s = data_s['x_vl_s'], data_s['y_vl_s']
x_ts_s, y_ts_s = data_s['x_ts_s'], data_s['y_ts_s']

print(f'Min x_tr/x_vl/x_ts sin escalamiento: {x_tr.min()}/{x_vl.min()}/{x_ts.min()}')
print(f'Min x_tr/x_vl/x_ts con escalamiento: {x_tr_s.min()}/{x_vl_s.min()}/{x_ts_s.min()}')

print(f'\nMin y_tr/y_vl/y_ts sin escalamiento: {y_tr.min()}/{y_vl.min()}/{y_ts.min()}')
print(f'Min y_tr/y_vl/y_ts con escalamiento: {y_tr_s.min()}/{y_vl_s.min()}/{y_ts_s.min()}')

print(f'\nMax x_tr/x_vl/x_ts sin escalamiento: {x_tr.max()}/{x_vl.max()}/{x_ts.max()}')
print(f'Max x_tr/x_vl/x_ts con escalamiento: {x_tr_s.max()}/{x_vl_s.max()}/{x_ts_s.max()}')

print(f'\nMax y_tr/y_vl/y_ts sin escalamiento: {y_tr.max()}/{y_vl.max()}/{y_ts.max()}')
print(f'Max y_tr/y_vl/y_ts con escalamiento: {y_tr_s.max()}/{y_vl_s.max()}/{y_ts_s.max()}')

"""3. Creación y Entrenamiento --> **Modelo LSTM**"""

#Crear Modelo --> LSTM
#Ajustar parámetros para reproducibilidad del entrenamiento
#Definir Hiperparámetro N_UNITS --> Número de Neuronas en capa LSTM
#Encontrar Pérdida --> RMSE en entrenamiento
#Realizar Compilación
#Realizar Entrenamiento --> Validar GPU
#Establecer Hiperparámetros --> Learning rate, EPOCH:Iteraciones, BATCH SIZE:Lotes
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import RMSprop

tf.random.set_seed(123)
tf.config.experimental.enable_op_determinism()
N_UNITS = 128
INPUT_SHAPE = (x_tr_s.shape[1], x_tr_s.shape[2])
modelo = Sequential()
modelo.add(LSTM(N_UNITS, input_shape=INPUT_SHAPE))
modelo.add(Dense(OUTPUT_LENGTH, activation='linear'))

def root_mean_squared_error(y_true, y_pred):
    rmse = tf.math.sqrt(tf.math.reduce_mean(tf.square(y_pred-y_true)))
    return rmse

optimizador = RMSprop(learning_rate=1e-2)
modelo.compile(
    optimizer = optimizador,
    loss = root_mean_squared_error,
)

EPOCHS = 100
BATCH_SIZE = 130
historia = modelo.fit(
    x = x_tr_s,
    y = y_tr_s,
    batch_size = BATCH_SIZE,
    epochs = EPOCHS,
    validation_data = (x_vl_s, y_vl_s),
    verbose=2
)

#Graficar curvas de train y val --> Verificar: Overfitting
plt.plot(historia.history['loss'],label='RMSE train')
plt.plot(historia.history['val_loss'],label='RMSE val')
plt.xlabel('Iteración')
plt.ylabel('RMSE')
plt.legend();

"""4. Medición --> **Performance del Modelo**

4.1 Validar Performance --> Conjunto de Datos: test

-Validar Performance:
*   train
*   val
"""

#Cálcular Error Cuadrático Medio (RMSE) --> train / val / test
rmse_tr = modelo.evaluate(x=x_tr_s, y=y_tr_s, verbose=0)
rmse_vl = modelo.evaluate(x=x_vl_s, y=y_vl_s, verbose=0)
rmse_ts = modelo.evaluate(x=x_ts_s, y=y_ts_s, verbose=0)

print('Comparativo Performance:')
print(f'  RMSE train:\t {rmse_tr:.3f}')
print(f'  RMSE val:\t {rmse_vl:.3f}')
print(f'  RMSE test:\t {rmse_ts:.3f}')

"""4.2 Analizar comportamiento del error (predicciones)
*   Predicción --> 12 meses
*   Conjunto de datos (test) --> predicción totalidad de datos
*   RMSE --> Gráfico
"""

#Predicción --> Conjunto (test)
#Transformación (inversa) de predicción --> valores (escala original)
#Calcular --> RMSE c/timestep (predicción)
y_ts_pred_s = modelo.predict(x_ts_s, verbose=0)
y_ts_pred = scaler.inverse_transform(y_ts_pred_s)
diff_cuad = np.square(y_ts.squeeze()-y_ts_pred)
proms = np.mean(diff_cuad, axis=0)
rmse = np.sqrt(proms)
t = np.linspace(1,12,12)

fig, ax = plt.subplots(figsize=(16, 4))
ax.scatter(t,rmse)
ax.set_xlabel('Indicador de Rendimiento (Predicción)')
ax.set_ylabel('Error RMSE (Tasa de Peligros)')
plt.xticks(ticks=t, labels=t)
plt.grid();

"""5. Predicción --> **Modelo Entrenado**"""

#Información de indicadores de rendimiento 12 meses
#Escala (rango de -1 a 1) --> var x
#Modelo entrenado --> var model
#Esacalador --> var scaler
#Calcular predicción escala --> rango (-1 a 1)
#Predicción en escala original
def predecir(x, model, scaler):

    y_pred_s = model.predict(x,verbose=0)
    y_pred = scaler.inverse_transform(y_pred_s)

    return y_pred.flatten()

#Calcular predicciones --> Conjunto de datos (test)
y_ts_pred = predecir(x_ts_s, modelo, scaler)

#Número de predicciones
#Cálcular --> errores simples
N = len(y_ts_pred)
ndato = np.linspace(1,N,N)

errores = y_ts.flatten()-y_ts_pred
plt.plot(errores);

#Filtrar datos para el año 2023 y categoría --> 'Procedimientos de Mantenimiento, Reparación e Inspección'
#Calcular HHT Total y Peligros Total para cada mes
#Calcular Tasa de Peligros
#Crear el DataFrame
#Crear tabla15 --> Datos de 2023
data_2023_pmri = data[(data['Año'] == 2023) & (data['Categoría del Peligro'] == 'Procedimientos de Mantenimiento, Reparación e Inspección')]
meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']

hht_total_2023 = []
peligros_total_2023 = []
for mes in meses:
    hht_total_mes = data_2023_pmri[f'HHT {mes}'].mean()
    peligros_total_mes = data_2023_pmri[mes].sum()
    hht_total_2023.append(round(hht_total_mes, 2))
    peligros_total_2023.append(round(peligros_total_mes, 2))

tasa_peligros_2023 = [(p * 1000) / h if h != 0 else 0 for p, h in zip(peligros_total_2023, hht_total_2023)]
tasa_peligros_2023 = [f'{valor:.2f}' for valor in tasa_peligros_2023]

promedio_tasa_peligros_2023 = round(sum(map(float, tasa_peligros_2023)) / len(tasa_peligros_2023), 2)
promedio_tasa_peligros_2023 = f'{promedio_tasa_peligros_2023:.2f}'

objetivo_2023 = round((1 - 0.05) * float(promedio_tasa_peligros_2022), 2)
objetivo_2023 = f'{objetivo_2023:.2f}'

sd_tasa_peligros_2023 = pd.Series(map(float, tasa_peligros_2023)).std()
sd_tasa_peligros_2023 = f'{sd_tasa_peligros_2023:.2f}'

datos_2023 = {
    'Mes': meses,
    'HHT Total': [round(valor, 2) for valor in hht_total_2023],
    'Peligros Total': [round(valor, 2) for valor in peligros_total_2023],
    'Tasa de Peligros': tasa_peligros_2023,
    'Promedio': promedio_tasa_peligros_2023,
    'Prom Año Ant +1SD': [round(float(promedio_tasa_peligros_2022) + float(sd_tasa_peligros_2021), 2)] * 12,
    'Prom Año Ant +2SD': [round(float(promedio_tasa_peligros_2022) + 2 * float(sd_tasa_peligros_2022), 2)] * 12,
    'Prom Año Ant +3SD': [round(float(promedio_tasa_peligros_2022) + 3 * float(sd_tasa_peligros_2022), 2)] * 12,
    'Objetivo 2023': [objetivo_2023] * 12
}

tabla15_2023 = pd.DataFrame(datos_2023)
columnas_numericas_2023 = ['HHT Total', 'Peligros Total', 'Prom Año Ant +1SD', 'Prom Año Ant +2SD', 'Prom Año Ant +3SD']
for col in columnas_numericas_2023:
    tabla15_2023[col] = tabla15_2023[col].apply(lambda x: f'{float(x):.2f}')
tabla15_2023_styled = tabla15_2023.style.set_properties(**{'text-align': 'center'})

tabla15_2023.name = "Hoja de Datos Indicador de Rendimiento de Seguridad Operacional (Procedimientos de Mantenimiento, Reparación e Inspección) Año 2022"
print(tabla15_2023.name)
tabla15_2023_styled = tabla15_2023.drop('Promedio', axis=1)
tabla15_2023_styled

#Datos existentes en --> tabla15_2023
#Valores de RMSE de referencia
#Crear gráfico --> Diagrama de Indicador (Procedimientos de Mantenimiento, Reparación e Inspección) 2023
#Proyección (estimada) para meses faltantes --> Oct, Nov, Dic
#Gráficar
rmse_train = 0.289
rmse_val = 0.196
rmse_test = 0.223

tasa_peligros_hasta_sept = np.array(tabla15_2023['Tasa de Peligros'][:9]).astype(float)
meses = tabla15_2023['Mes'][:9]

prom_anio_ant_1sd_2022 = np.array(tabla14_2022['Prom Año Ant +1SD']).astype(float)
prom_anio_ant_2sd_2022 = np.array(tabla14_2022['Prom Año Ant +2SD']).astype(float)
prom_anio_ant_3sd_2022 = np.array(tabla14_2022['Prom Año Ant +3SD']).astype(float)

prom_anio_ant_1sd_2022 = prom_anio_ant_1sd_2022[:9]
prom_anio_ant_2sd_2022 = prom_anio_ant_2sd_2022[:9]
prom_anio_ant_3sd_2022 = prom_anio_ant_3sd_2022[:9]
fig, ax = plt.subplots(figsize=(14, 3))
ax.plot(meses, tasa_peligros_hasta_sept, label='Tasa de Peligros 2023', marker='o', color='black')

correccion_oct = rmse_test / rmse_val
correccion_nov = rmse_test / rmse_val
correccion_dic = rmse_test / rmse_val

tasa_peligros_oct = tasa_peligros_hasta_sept[8] * correccion_oct
tasa_peligros_nov = tasa_peligros_oct * correccion_nov
tasa_peligros_dic = tasa_peligros_nov * correccion_dic

tabla15_2023.loc[9, 'Tasa de Peligros'] = tasa_peligros_oct
tabla15_2023.loc[10, 'Tasa de Peligros'] = tasa_peligros_nov
tabla15_2023.loc[11, 'Tasa de Peligros'] = tasa_peligros_dic

meses_estimados = ['Oct', 'Nov', 'Dic']
tasas_estimadas = [tasa_peligros_oct, tasa_peligros_nov, tasa_peligros_dic]
ax.scatter(meses_estimados, tasas_estimadas, c='r', marker='x', label='Estimados', s=100)

ax.plot(meses, prom_anio_ant_1sd_2022, label='Prom Año Ant +1SD 2022', linestyle='--', marker='o', color='yellow')
ax.plot(meses, prom_anio_ant_2sd_2022, label='Prom Año Ant +2SD 2022', linestyle='--', marker='o', color='orange')
ax.plot(meses, prom_anio_ant_3sd_2022, label='Prom Año Ant +3SD 2022', linestyle='--', marker='o', color='red')
ax.set_xlabel('Mes')
ax.set_ylabel('Tasa de Peligros', color='black')
ax.set_title('Indicador de Rendimiento (Proyectado 2023)')
ax.legend(loc='upper right', bbox_to_anchor=(1.230, 1))
ax.grid(True, linestyle='--')
plt.show()